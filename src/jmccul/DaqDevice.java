package jmccul;

import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.Optional;
import java.util.function.Predicate;
import static jmccul.JMCCULUtils.checkError;
import jmccul.digital.DigitalImpl;
import jmccul.jna.DaqDeviceDescriptor;
import jmccul.jna.MeasurementComputingUniversalLibrary;

/**
 *
 * @author Peter Froud
 */
public class DaqDevice implements AutoCloseable {

    static {
        /*
        There are two ways to set up MC DAQ boards.
        See https://www.mccdaq.com/pdfs/manuals/Mcculw_WebHelp/hh_goto.htm?ULStart.htm#Function_Reference/Ical-APIDetect.htm

        (1) Use InstaCal to detect boards and assign a board number.
            The path to InstaCal is "C:\Program Files (x86)\Measurement Computing\DAQ\inscal32.exe".
            InstaCal saves confugration to a config file on disk at "C:\ProgramData\Measurement Computing\DAQ\CB.CFG".
            Using InstaCal is troublesome for two reasons:
              (a) A human must open InstaCal and click a few buttons when a board is first connected.
              (b) InstaCal settings are sometimes erased, I think during some Windows Update operations.

        (2) Use the Universal Library to detect boards and assign a board number.
            This is better than using InstaCal because the whole thing is totally automatic.
         */
        //
        /*
        https://www.mccdaq.com/pdfs/manuals/Mcculw_WebHelp/hh_goto.htm?ULStart.htm#Function_Reference/Device-Discovery/cbIgnoreInstaCal.htm

         The cbIgnoreInstaCal() function tell the MCDAQ driver to ignore the CB.CFG config file
         generated by InstaCal.

         Through experimentation, I have discovered that if you call cbIgnoreInstaCal() after
         opening any devices with cbCreateDaqDevice(), operations on an already openeded board
         will throw error 1028 "Tried to release a board which doesn't exist."
         Therefore we'll use boolean field to make sure we only call cbIgnoreInstaCal() once.
         */
        try {
            checkError(MeasurementComputingUniversalLibrary.INSTANCE.cbIgnoreInstaCal());
        } catch (Exception ex) {
            ex.printStackTrace();
            // I legitmetley do not know what to do if this function call fails. Throw a RuntimeException???
        }
    }

    private static int nextBoardNumber = 0;

    private final MeasurementComputingUniversalLibrary LIBRARY = MeasurementComputingUniversalLibrary.INSTANCE;

    private final static int BOARD_NAME_LENGTH = MeasurementComputingUniversalLibrary.BOARDNAMELEN;
    private final static int CONFIG_ITEM_LENGTH = MeasurementComputingUniversalLibrary.BOARDNAMELEN;
    private final static int CONFIG_TYPE_BOARD_INFO = MeasurementComputingUniversalLibrary.BOARDINFO;
    private final static int CONFIG_ITEM_FACTORY_SERIAL_NUMBER = MeasurementComputingUniversalLibrary.BIDEVSERIALNUM;
    private final static int CONFIG_ITEM_USER_DEVICE_ID = MeasurementComputingUniversalLibrary.BIUSERDEVID;

    public final int BOARD_NUMBER;
    public final String FACTORY_SERIAL_NUMBER;
    public final String BOARD_NAME;
//    public final String USER_DEVICE_IDENTIFIER;

    public final DigitalImpl digital;

    public static Optional<DaqDevice> searchByBoardName(String desiredBoardName) throws JMCCULException {
        Predicate<DaqDeviceDescriptor> boardNamePredicate = (DaqDeviceDescriptor descriptor) -> {
            return (new String(descriptor.ProductName)).trim().equals(desiredBoardName);
        };

        Optional<DaqDeviceDescriptor> descriptor = findFirstDescriptorMatching(boardNamePredicate);
        if (descriptor.isPresent()) {
            DaqDevice device = new DaqDevice(descriptor.get());
            return Optional.of(device);
        } else {
            return Optional.empty();
        }
    }

    public static Optional<DaqDevice> findFirstDeviceMatching(Predicate<DaqDevice> predicate) throws JMCCULException {
        // can't do this cleanly with stream because DaqDevice constructors throws a checked exception
        DaqDeviceDescriptor[] descriptors = JMCCULUtils.findDaqDeviceDescriptors();
        for (DaqDeviceDescriptor descriptor : descriptors) {
            try {
                DaqDevice device = new DaqDevice(descriptor);
                if (predicate.test(device)) {
                    return Optional.of(device);
                }
            } catch (JMCCULException ignore) {

            }
        }
        return Optional.empty();
    }

    public static Optional<DaqDeviceDescriptor> findFirstDescriptorMatching(Predicate<DaqDeviceDescriptor> predicate) throws JMCCULException {
        return Arrays.stream(JMCCULUtils.findDaqDeviceDescriptors()).filter(predicate).findFirst();
    }

    public DaqDevice(DaqDeviceDescriptor daqDeviceDescriptor) throws JMCCULException {
        BOARD_NUMBER = nextBoardNumber;
        // https://www.mccdaq.com/pdfs/manuals/Mcculw_WebHelp/hh_goto.htm?ULStart.htm#Function_Reference/Device-Discovery/cbCreateDaqDevice.htm
        checkError(LIBRARY.cbCreateDaqDevice(BOARD_NUMBER, daqDeviceDescriptor));
        nextBoardNumber++;
        BOARD_NAME = getBoardName();
        FACTORY_SERIAL_NUMBER = getFactorySerialNumber();
//        USER_DEVICE_IDENTIFIER = getUserDeviceIdentifier();
        /*
                if (debugPrintouts) {
                System.out.printf("model=%s, SN=%s assigned to BOARD_NUMBER %d. nextBoardNumber is now %d.\n", desiredBoardName, FACTORY_SERIAL_NUMBER, BOARD_NUMBER, nextBoardNumber);
                }
         */

        digital = new DigitalImpl(this);
    }

    public final void release() throws JMCCULException {
        // https://www.mccdaq.com/pdfs/manuals/Mcculw_WebHelp/hh_goto.htm?ULStart.htm#Function_Reference/Device-Discovery/cbReleaseDaqDevice.htm
        checkError(LIBRARY.cbReleaseDaqDevice(BOARD_NUMBER));
    }

    private String getBoardName() throws JMCCULException {
        final ByteBuffer buf = ByteBuffer.allocate(BOARD_NAME_LENGTH);
        // https://www.mccdaq.com/pdfs/manuals/Mcculw_WebHelp/hh_goto.htm?ULStart.htm#Function_Reference/Miscellaneous_Functions/cbGetBoardName.htm
        checkError(LIBRARY.cbGetBoardName(BOARD_NUMBER, buf));
        return new String(buf.array()).trim();
    }

    private String getFactorySerialNumber() throws JMCCULException {
        final int DEVICE_NUMBER_BASE_BOARD = 0; //set to 1 to get the factory serial number of an expansion board
        return Configuration.getString(
                CONFIG_TYPE_BOARD_INFO,
                BOARD_NUMBER,
                DEVICE_NUMBER_BASE_BOARD,
                CONFIG_ITEM_FACTORY_SERIAL_NUMBER,
                CONFIG_ITEM_LENGTH
        );

    }

    private String getUserDeviceIdentifier() throws JMCCULException {
        /*
        On a USB-1208FS, this throws error code 41 "This function can not be used with this board".
        In InstaCal you can only set the Identifier field to a number, so I think we need to use
        BIUSERDEVIDNUM.
         */
        final int DEVICE_NUMBER_DEFAULT = 0;
        return Configuration.getString(
                CONFIG_TYPE_BOARD_INFO,
                BOARD_NUMBER,
                DEVICE_NUMBER_DEFAULT,
                CONFIG_ITEM_USER_DEVICE_ID,
                CONFIG_ITEM_LENGTH
        );
    }

    @Override
    public String toString() {
        return BOARD_NAME + " " + FACTORY_SERIAL_NUMBER;
    }

    @Override
    public void close() throws Exception {
        release();
    }

}
