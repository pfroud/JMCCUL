/*
 * Copyright (c) 2022 Peter Froud.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package xyz.froud.jmccul.jna;

import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.PointerType;
import com.sun.jna.ptr.NativeLongByReference;
import com.sun.jna.win32.StdCallLibrary;

import java.nio.ByteBuffer;
import java.nio.DoubleBuffer;
import java.nio.FloatBuffer;
import java.nio.IntBuffer;
import java.nio.LongBuffer;
import java.nio.ShortBuffer;

/**
 * C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h
 * <p>
 * JNA Wrapper for <b>Measurement Computing Universal Library</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
@SuppressWarnings("ALL")
public interface MeasurementComputingUniversalLibrary extends StdCallLibrary {

    public static final String JNA_LIBRARY_NAME = "cbw64";
    public static final NativeLibrary JNA_NATIVE_LIB = NativeLibrary.getInstance(MeasurementComputingUniversalLibrary.JNA_LIBRARY_NAME);
    public static final MeasurementComputingUniversalLibrary INSTANCE = (MeasurementComputingUniversalLibrary) Native.load(MeasurementComputingUniversalLibrary.JNA_LIBRARY_NAME, MeasurementComputingUniversalLibrary.class);

    public static final int TRIG_ANALOG_SW = (int) 3;
    public static final int CONVERTDATA = (int) 0x0008;
    public static final int SQUAREWAVE = (int) 3;
    public static final int UNITS_RAW = (int) 1;
    public static final int INCTR2 = (int) 3;
    public static final int ADC_STARTSCAN = (int) 0x0080;
    public static final int NOT7266CTR = (int) 135;
    public static final int BIDACUPDATEMODE = (int) 215;
    public static final int DOSFILENOTFOUND = (int) 502;
    public static final int DIGITALINFO = (int) 3;
    public static final int BIPPT025AMPS = (int) 205;
    public static final int BIPRNDELAY = (int) 128;
    public static final int TRIG_EXTTTL = (int) 1;
    public static final int DMAIO = (int) 0x0040;
    public static final int CAL_TABLE_FIELD = (int) 1;
    public static final int ABOVE_LEVEL = (int) 2;
    public static final int NOCONVERTDATA = (int) 0x0000;
    public static final int SIMULTANEOUS = (int) 0x0200;
    public static final int DIINMASK = (int) 8;
    public static final int BIPPIODIO = (int) 129;
    public static final int COUNTUP = (int) 1;
    public static final int AI_CHAN_TYPE_RTD_100OHM_3W = (int) 404;
    public static final int BADCTRCONTROL = (int) 70;
    public static final int NODMAMEMORY = (int) 133;
    public static final int ALREADYACTIVE = (int) 22;
    public static final int BIDACSTARTUP = (int) 217;
    public static final int UNIPT01VOLTS = (int) 107;
    public static final int BICTR6SRC = (int) 157;
    public static final int BIDACUPDATECMD = (int) 216;
    public static final int UNIPT5VOLTS = (int) 110;
    public static final int END_OF_AI_IDX = (int) 4;
    public static final int ADC_TB_SRC = (int) 0x0010;
    public static final int BIUSESEXPS = (int) 8;
    public static final int BIDAC1VREF = (int) 109;
    public static final int VER_FW_MAIN = (int) 0;
    public static final int HIGH_LEVEL = (int) 6;
    public static final int AI_CHAN_TYPE_RESISTANCE_1K2W = (int) 204;
    public static final int AI_CHAN_TYPE_RTD_100OHM_4W = (int) 402;
    public static final int BADBOARD = (int) 1;
    public static final int ON_END_OF_AI_SCAN = (int) 0x0010;
    public static final int BIP30VOLTS = (int) 23;
    public static final int BIINDEXCFG = (int) 200;
    public static final int BADENCODING = (int) 138;
    public static final int TRIGCTR2 = (int) 2;
    public static final int BADTRIGCHAN = (int) 174;
    public static final int INVALIDTEDSSENSOR = (int) 1001;
    public static final int CTR_DEBOUNCE_NONE = (int) 16;
    public static final int TC_TYPE_J = (int) 1;
    public static final int STRINGTOOLONG = (int) 193;
    public static final int TC_TYPE_K = (int) 2;
    public static final int NOTMUXCONF = (int) 10;
    public static final int TC_TYPE_E = (int) 4;
    public static final int BADFIRSTPOINT = (int) 45;
    public static final int BADFILENUMBER = (int) 345;
    public static final int GIVERSION = (int) 36;
    public static final int CALIBRATEDATA = (int) 0x0000;
    public static final int TC_TYPE_R = (int) 5;
    public static final int TC_TYPE_T = (int) 3;
    public static final int TC_TYPE_S = (int) 6;
    public static final int TC_TYPE_N = (int) 8;
    public static final int BADINDEXMODE = (int) 139;
    public static final int HOLDREG9 = (int) 109;
    public static final int MAX_NUM_EVENT_TYPES = (int) 32;
    public static final int RDBK_REG_FAIL = (int) 323;
    public static final int HOLDREG6 = (int) 106;
    public static final int MODULO_N_ON = (int) 0x8000;
    public static final int ON_END_OF_INPUT_SCAN = (int) 0x0010;
    public static final int HOLDREG5 = (int) 105;
    public static final int HOLDREG8 = (int) 108;
    public static final int HOLDREG7 = (int) 107;
    public static final int SO_FIRSTPORTC = (int) 1;
    public static final int TC_TYPE_B = (int) 7;
    public static final int BIDIOENABLE = (int) 101;
    public static final int BIDIDEBOUNCESTATE = (int) 255;
    public static final int CANT_INSTALL_INT = (int) 334;
    public static final int BAD_RTD_CONVERSION = (int) 325;
    public static final int BIPPT1VOLTS = (int) 7;
    public static final int DAS16JRRATEWARNING = (int) 111;
    public static final int NOCJCCHAN = (int) 81;
    public static final int ON_CHANGE_DI = (int) 0x0040;
    public static final int CFG_FILE_WRITE_FAILURE = (int) 305;
    public static final int HOLDREG2 = (int) 102;
    public static final int HOLDREG1 = (int) 101;
    public static final int HOLDREG4 = (int) 104;
    public static final int HOLDREG3 = (int) 103;
    public static final int SO_TMR0 = (int) 6;
    public static final int AI_CHAN_TYPE_QUART_BRIDGE_350OHM = (int) 501;
    public static final int SO_TMR1 = (int) 7;
    public static final int INVALIDNETFRAME = (int) 1018;
    public static final int LOADREG3 = (int) 3;
    public static final int BISBXBUSWIDTH = (int) 145;
    public static final int EXTERNAL_INTERRUPT_IDX = (int) 1;
    public static final int UNIPT25VOLTS = (int) 111;
    public static final int LOADREG2 = (int) 2;
    public static final int LOADREG5 = (int) 5;
    public static final int LOADREG4 = (int) 4;
    public static final int CTR_DEBOUNCE7500ns = (int) 3;
    public static final int LOADREG1 = (int) 1;
    public static final int LOADREG0 = (int) 0;
    public static final int NETCONNECTIONFAILED = (int) 1016;
    public static final int INVALIDPRETRIGCONVERT = (int) 118;
    public static final int LOADREG7 = (int) 7;
    public static final int COMPARE_BORROW = (int) 2;
    public static final int LOADREG6 = (int) 6;
    public static final int LOADREG9 = (int) 9;
    public static final int DELIMITER_SPACE = (int) 2;
    public static final int LOADREG8 = (int) 8;
    public static final int COUNTDOWN = (int) 0;
    public static final int BADEXCITATION = (int) 1005;
    public static final int EXTTRIGGER = (int) 0x4000;
    public static final int OVERRUN = (int) 29;
    public static final int IRQNOTAVAILABLE = (int) 134;
    public static final int BIP2VOLTS = (int) 14;
    public static final int ALWAYSLOW = (int) 0;
    public static final int GATE20 = (int) 310;
    public static final int RTD_PT_3851 = (int) 0x02;
    public static final int RTD_PT_3850 = (int) 0x07;
    public static final int CTRNOINIT = (int) 89;
    public static final int AIINPUTMODENOTCONFIGURABLE = (int) 1033;
    public static final int GATECTR2 = (int) 1;
    public static final int BOARDNUMINUSE = (int) 1026;
    public static final int CANTINSTALLEVENT = (int) 153;
    public static final int C_ERROR = (int) 0x0010;
    public static final int MEMINFO = (int) 8;
    public static final int BIAIWAVETYPE = (int) 202;
    public static final int LOSSOFDATA = (int) 347;
    public static final int BISBX0DMACHAN = (int) 137;
    public static final int FIRSTPORTCH = (int) 13;
    public static final int GATE2 = (int) 7;
    public static final int GATE1 = (int) 6;
    public static final int BADGATEINTERVAL = (int) 59;
    public static final int CANT_GET_STATUS = (int) 337;
    public static final int BADEVENTPARAM = (int) 183;
    public static final int GATED_CLK = (int) 2;
    public static final int GATE11 = (int) 206;
    public static final int BIBOARDTYPE = (int) 1;
    public static final int GATE9 = (int) 109;
    public static final int GATE10 = (int) 110;
    public static final int RETRIGMODE = (int) 0x20000;
    public static final int GATE8 = (int) 108;
    public static final int DIOUTMASK = (int) 9;
    public static final int GATE7 = (int) 107;
    public static final int FIRSTPORTCL = (int) 12;
    public static final int GATE6 = (int) 106;
    public static final int GATE15 = (int) 210;
    public static final int OUTOFDOSMEMORY = (int) 129;
    public static final int GATE5 = (int) 10;
    public static final int GATE14 = (int) 209;
    public static final int GATE4 = (int) 9;
    public static final int GATE13 = (int) 208;
    public static final int GATE3 = (int) 8;
    public static final int GATE12 = (int) 207;
    public static final int GATE19 = (int) 309;
    public static final int GATE18 = (int) 308;
    public static final int PERIOD_MODE_X1000 = (int) 0x0003;
    public static final int GATE17 = (int) 307;
    public static final int GATE16 = (int) 306;
    public static final int NOTRS485 = (int) 99;
    public static final int DOSWRITEFAULT = (int) 529;
    public static final int FIFTHPORTCL = (int) 28;
    public static final int BADCOUNTMODE = (int) 137;
    public static final int BIDETECTOPENTC = (int) 361;
    public static final int TIMEFORMAT_24HOUR = (int) 1;
    public static final int AI_CHAN_TYPE_VOLTAGE = (int) 0;
    public static final int NO_CTRL_REG = (int) 318;
    public static final int OUTOFRANGE = (int) 73;
    public static final int BADBUFFERSIZE = (int) 154;
    public static final int EXPINFOARRAY = (int) 7;
    public static final int BIDEVUNIQUEID = (int) 357;
    public static final int BICTR13SRC = (int) 164;
    public static final int NOPROGGAIN = (int) 31;
    public static final int LATCH_DO = (int) 2;
    public static final int BICTR8SRC = (int) 159;
    public static final int LATCH_DI = (int) 1;
    public static final int NOTMEMCONF = (int) 87;
    public static final int XIMUX_AD_CHAN2 = (int) 2;
    public static final int DOSPATHNOTFOUND = (int) 503;
    public static final int BIDACPOLARITY = (int) 119;
    public static final int CANT_PASS_USER_BUFFER = (int) 333;
    public static final int XIMUX_AD_CHAN1 = (int) 1;
    public static final int PULSEWIDTH_MODE_INVERT_GATE = (int) 0x20000;
    public static final int CTR_TICK2000ns = (int) 12;
    public static final int GATING_ON = (int) 0x0010;
    public static final int BIEXTOUTPACEREDGE = (int) 349;
    public static final int DATA_AVAILABLE_IDX = (int) 3;
    public static final int BIPPT2VOLTS = (int) 13;
    public static final int NOT9513CTR = (int) 48;
    public static final int INVALIDBTHFRAME = (int) 1014;
    public static final int BITCGLOBALAVG = (int) 166;
    public static final double CURRENTREVNUM = (double) 6.7;
    public static final int RANGEMISMATCH = (int) 101;
    public static final int COUNT_DOWN_ON = (int) 0x10000;
    public static final int NO_RDBK_REG = (int) 320;
    public static final int PAGEOVERRUN = (int) 23;
    public static final int BIPPT01VOLTS = (int) 9;
    public static final int C_COMPARE = (int) 0x0004;
    public static final int BIDIDEBOUNCETIME = (int) 256;
    public static final int VER_FW_MEASUREMENT = (int) 1;
    public static final int FIFTHPORTCH = (int) 29;
    public static final int CTRINPUT19 = (int) 304;
    public static final int CTRINPUT18 = (int) 303;
    public static final int BURSTMODE = (int) 0x1000;
    public static final int NO_PCM_CARD = (int) 630;
    public static final int GATING_OFF = (int) 0x0000;
    public static final int CTRINPUT15 = (int) 205;
    public static final int CTRINPUT14 = (int) 204;
    public static final int CTRINPUT17 = (int) 302;
    public static final int CTRINPUT16 = (int) 301;
    public static final int CTRINPUT11 = (int) 201;
    public static final int CTRINPUT10 = (int) 105;
    public static final int CTRINPUT13 = (int) 203;
    public static final int CTRINPUT12 = (int) 202;
    public static final int PERIOD_MODE_INVERT_GATE = (int) 0x20000;
    public static final int NOFILTER = (int) 0x0400;
    public static final int BIPACERCTR0SRC = (int) 107;
    public static final int RATEWARNING = (int) 37;
    public static final int BRIDGE_FULL = (int) 1;
    public static final int COUNTERINFO = (int) 4;
    public static final int BIINPUTPACEROUT = (int) 350;
    public static final int BAD_MEM_HANDLE = (int) 203;
    public static final int AUXIN0 = (int) 0x01;
    public static final int AUXIN2 = (int) 0x04;
    public static final int AUXIN1 = (int) 0x02;
    public static final int BIINTLEVEL = (int) 2;
    public static final int BIDACTRIGCOUNT = (int) 284;
    public static final int AUXIN4 = (int) 0x10;
    public static final int ON_END_OF_AO_SCAN = (int) 0x0020;
    public static final int AUXIN3 = (int) 0x08;
    public static final int NOTUSED = (int) -1;
    public static final int AUXIN5 = (int) 0x20;
    public static final int TRIG_PATTERN_BELOW = (int) 19;
    public static final int TOOMANYGAINS = (int) 36;
    public static final int RANGE_LIMIT = (int) 1;
    public static final int ALEGATE = (int) 7;
    public static final int BADINDEX = (int) 158;
    public static final int CTR32LOW = (int) 4;
    public static final int CTRINPUT20 = (int) 305;
    public static final int CIINITIALIZED = (int) 1;
    public static final int BADQUADRATURE = (int) 136;
    public static final int AUXPORT = (int) 1;
    public static final int BIINITIALIZED = (int) 4;
    public static final int UNIPT02VOLTS = (int) 108;
    public static final int NOMOREFILES = (int) 344;
    public static final int BICTR4SRC = (int) 131;
    public static final int XIVSELECT = (int) 103;
    public static final int STRINGTOOSHORT = (int) 108;
    public static final int OUTPUT_INITIAL_STATE_HIGH = (int) 0x400000;
    public static final int CTR_FALLING_EDGE = (int) 1;
    public static final int NETDEVINUSEBYANOTHERPROC = (int) 1024;
    public static final int BIP20VOLTS = (int) 15;
    public static final int LOADREG20 = (int) 20;
    public static final int BITUSEDFORALARM = (int) 169;
    public static final int CTRINPUT6 = (int) 101;
    public static final int LOADREG13 = (int) 13;
    public static final int NOMEMBOARD = (int) 85;
    public static final int CTRINPUT5 = (int) 5;
    public static final int LOADREG14 = (int) 14;
    public static final int CTRINPUT8 = (int) 103;
    public static final int LOADREG15 = (int) 15;
    public static final int CTRINPUT7 = (int) 102;
    public static final int LOADREG16 = (int) 16;
    public static final int CTRINPUT2 = (int) 2;
    public static final int LOADREG17 = (int) 17;
    public static final int BIFWVERSION = (int) 170;
    public static final int CTRINPUT1 = (int) 1;
    public static final int LOADREG18 = (int) 18;
    public static final int CTRINPUT4 = (int) 4;
    public static final int LOADREG19 = (int) 19;
    public static final int FUNCTION_NOT_IMPLEMENTED = (int) 324;
    public static final int CTRINPUT3 = (int) 3;
    public static final int BI330OPMODE = (int) 102;
    public static final int DTACTIVE = (int) 86;
    public static final int SEVENTHPORTB = (int) 35;
    public static final int NOGATEALLOWED = (int) 143;
    public static final int AI_CHAN_TYPE_RESISTANCE_1K4W = (int) 202;
    public static final int BIDOTRIGCOUNT = (int) 344;
    public static final int CTR_TICK20ns = (int) 10;
    public static final int BADINT = (int) 15;
    public static final int CTRINPUT9 = (int) 104;
    public static final int LOADREG10 = (int) 10;
    public static final int LOADREG11 = (int) 11;
    public static final int BICTRLLINES = (int) 154;
    public static final int LOADREG12 = (int) 12;
    public static final int BISBX0INTLEVEL0 = (int) 138;
    public static final int PRESCALER2 = (int) 802;
    public static final int PRESCALER1 = (int) 801;
    public static final int BISBX0INTLEVEL1 = (int) 139;
    public static final int PRESCALER4 = (int) 804;
    public static final int PRESCALER3 = (int) 803;
    public static final int DTCONNECT = (int) 0x0010;
    public static final int NOSCALE = (int) 5;
    public static final int BIEXTINPACEREDGE = (int) 348;
    public static final int DELBOARDNOTEXIST = (int) 124;
    public static final int SEVENTHPORTA = (int) 34;
    public static final int CFGFILE_NOINSERT = (int) 311;
    public static final int STOPFATAL = (int) 1;
    public static final int BIRANGE = (int) 6;
    public static final int XINUMEXPCHANS = (int) 7;
    public static final int BADFREQUENCY = (int) 182;
    public static final int MIBASEADR = (int) 100;
    public static final int BIT_NOT_ONE = (int) 314;
    public static final int BICTRLINKING = (int) 134;
    public static final int DOSBADDRIVE = (int) 515;
    public static final int FINE_GAIN = (int) 0x04;
    public static final int TRIGSTATE = (int) 26;
    public static final int CTR_DEBOUNCE1500us = (int) 11;
    public static final int TRIG_PATTERN_ABOVE = (int) 18;
    public static final int BIEXTCLKTYPE = (int) 227;
    public static final int NO_ENHANCED_MODE = (int) 204;
    public static final int BIPPT156VOLTS = (int) 18;
    public static final int XIVSOURCE = (int) 102;
    public static final int DEADNETIFC = (int) 185;
    public static final int ON_DATA_AVAILABLE = (int) 0x0008;
    public static final int BIINTP2LEVEL = (int) 110;
    public static final int ROLLOVER = (int) 0x0000;
    public static final int BADCOUNTERDEVNUM = (int) 12;
    public static final int NONINVERTED = (int) 0;
    public static final int NOBURSTMODE = (int) 94;
    public static final int BIOUTPUTPACEROUT = (int) 351;
    public static final int FORECONTINUOUS = (int) 40;
    public static final int TRIG_ANALOG_HW = (int) 2;
    public static final int COARSE_OFFSET = (int) 0x02;
    public static final int BITEMPSCALE = (int) 280;
    public static final int EXPANSIONINFO = (int) 5;
    public static final int BIADPOLARITY = (int) 112;
    public static final int ENCODER_MODE_MODULO_N_ON = (int) 0x8000;
    public static final int DISCONNECTED = (int) 4;
    public static final int INVALIDSETPOINTOUTPUTTYPE = (int) 190;
    public static final int BIPROTOCOL = (int) 150;
    public static final int BIFACTORYID = (int) 272;
    public static final int BADDUTYCYCLE = (int) 197;
    public static final int WIN_CANT_PAGE_LOCK_BUFFER = (int) 606;
    public static final int ENCODER = (int) 0x0500;
    public static final int BIDINUMDEVS = (int) 9;
    public static final int BIPANID = (int) 258;
    public static final int CTR_DEBOUNCE127500ns = (int) 7;
    public static final int NETTIMEOUT = (int) 1019;
    public static final int BADSIGNAL = (int) 156;
    public static final int CANT_GET_PRINT_PORT = (int) 338;
    public static final int THIRDPORTB = (int) 19;
    public static final int BICTRINTSRC = (int) 133;
    public static final int THIRDPORTA = (int) 18;
    public static final int CTR_DEBOUNCE63500ns = (int) 6;
    public static final int OUTPUT_ON = (int) 0x200000;
    public static final int MBUSNOCTLR = (int) 149;
    public static final int ENCODER_MODE_CLEAR_ON_Z_ON = (int) 0x0020;
    public static final int INVALIDDELIMITER = (int) 349;
    public static final int OUTPUTVAL0REG0 = (int) 1100;
    public static final int OUTPUTVAL0REG1 = (int) 1101;
    public static final int BISRCADPACER = (int) 223;
    public static final int OUTPUTVAL0REG2 = (int) 1102;
    public static final int NOPCMCIABOARD = (int) 106;
    public static final int OUTPUTVAL0REG3 = (int) 1103;
    public static final int BIADAIMODE = (int) 373;
    public static final int OUTPUTVAL0REG4 = (int) 1104;
    public static final int OUTPUTVAL0REG5 = (int) 1105;
    public static final int OUTPUTVAL0REG6 = (int) 1106;
    public static final int OUTPUTVAL0REG7 = (int) 1107;
    public static final int BICHANBRIDGETYPE = (int) 354;
    public static final int BINUMIOPORTS = (int) 15;
    public static final int CONVERTEXTMEM = (int) 109;
    public static final int NOTLINKED = (int) 0;
    public static final int BIADRES = (int) 291;
    public static final int XIFACGAIN = (int) 108;
    public static final int BIT_32 = (int) 0x0004;
    public static final int BIP1VOLTS = (int) 4;
    public static final int WORDXFER = (int) 0x0100;
    public static final int BISBX1ADDRESS = (int) 141;
    public static final int BICTR1SRC = (int) 105;
    public static final int BITRIGPOLARITY = (int) 205;
    public static final int BYTEXFER = (int) 0x0000;
    public static final int ADSTATUSHUNG = (int) 27;
    public static final int BADFILENAME = (int) 32;
    public static final int ALREADYENABLED = (int) 151;
    public static final int BADEVENTSIZE = (int) 152;
    public static final int CARRYBORROW_UPDOWN = (int) 3;
    public static final int OFFSET = (int) 0x02;
    public static final int SYNC_CLK = (int) 0x1000;
    public static final int CFG_FILE_READ_FAILURE = (int) 304;
    public static final int NO_BTH_BOARD = (int) 350;
    public static final int UNI5VOLTS = (int) 101;
    public static final int MODULO_N = (int) 3;
    public static final int BIINTP1LEVEL = (int) 156;
    public static final int BADTEMPSCALE = (int) 74;
    public static final int BADPCMSLOTREF = (int) 121;
    public static final int TC = (int) 7;
    public static final int NODTCONNECT = (int) 0x0000;
    public static final int ENCODER_MODE_X4 = (int) 0x0002;
    public static final int UNITS_TEMPERATURE = (int) 0;
    public static final int ENCODER_MODE_X2 = (int) 0x0001;
    public static final int ENCODER_MODE_X1 = (int) 0x0000;
    public static final int BIT_16 = (int) 0x0000;
    public static final int ADC_START_TRIG = (int) 0x0004;
    public static final int NOTCOUNTERCONF = (int) 7;
    public static final int FREQ10 = (int) 115;
    public static final int BIADCHANAIMODE = (int) 249;
    public static final int FINE_OFFSET = (int) 0x08;
    public static final int FREQ18 = (int) 313;
    public static final int FREQ17 = (int) 312;
    public static final int SCAN_ERROR_IDX = (int) 0;
    public static final int FREQ16 = (int) 311;
    public static final int FREQ15 = (int) 215;
    public static final int FREQ14 = (int) 214;
    public static final int FREQ13 = (int) 213;
    public static final int BIP4VOLTS = (int) 16;
    public static final int FREQ12 = (int) 212;
    public static final int DEFAULTOPTION = (int) 0x0000;
    public static final int FREQ11 = (int) 211;
    public static final int NO_RECYCLE = (int) 2;
    public static final int VOLTS = (int) 4;
    public static final int BIDEVNOTES = (int) 263;
    public static final int SOCKETDISCONNECTED = (int) 1025;
    public static final int BIIRQCONNECT = (int) 204;
    public static final int COMPATMODE = (int) 25;
    public static final int XICHCUSTOM = (int) 110;
    public static final int BIDACTRIG = (int) 148;
    public static final int FREQ20 = (int) 315;
    public static final int PERIOD_MODE_X10 = (int) 0x0001;
    public static final int BICHANRTDTYPE = (int) 356;
    public static final int C_OVERFLOW = (int) 0x0002;
    public static final int BITEMPAVG = (int) 352;
    public static final int INDEX_ERROR = (int) 4;
    public static final int HIGHRESRATE = (int) 0x200000;
    public static final int CTR32HIGH = (int) 5;
    public static final int FREQ19 = (int) 314;
    public static final int BIWAITSTATE = (int) 14;
    public static final int BIWAITSTATEP1 = (int) 155;
    public static final int BIWAITSTATEP2 = (int) 111;
    public static final int OBSOLETEOPTION = (int) 130;
    public static final int DATASOCKETCONNECTIONFAILED = (int) 1017;
    public static final int CTR_DEBOUNCE100us = (int) 8;
    public static final int SETTLE_10us = (int) 3;
    public static final int BIP60VOLTS = (int) 20;
    public static final int DOSBADFUNC = (int) 501;
    public static final int COARSE_GAIN = (int) 0x01;
    public static final int BIADTRIGCOUNT = (int) 219;
    public static final int XIBOARDTYPE = (int) 0;
    public static final int BIPPT125VOLTS = (int) 22;
    public static final int DAQIFUNCTION = (int) 6;
    public static final int BIPPT625VOLTS = (int) 5;
    public static final int FREERUNNING = (int) 91;
    public static final int CTR_TRIGGER_BEFORE_STABLE = (int) 1;
    public static final int PRESET2 = (int) 702;
    public static final int GATE_TRIG_SRC = (int) 0x100000;
    public static final int PRESET1 = (int) 701;
    public static final int BINODEID = (int) 262;
    public static final int PRESET4 = (int) 704;
    public static final int PRESET3 = (int) 703;
    public static final int UPDATEIMMEDIATE = (int) 0;
    public static final int XICHGAIN = (int) 104;
    public static final int BICALFACTOR2 = (int) 147;
    public static final int AHLGATE = (int) 4;
    public static final int CTR_DEBOUNCE1500ns = (int) 1;
    public static final int ADCCLOCKTRIG = (int) 0x080000;
    public static final int UNI1PT67VOLTS = (int) 109;
    public static final int PRINTALL = (int) 3;
    public static final int BADDAVAL = (int) 19;
    public static final int BICALFACTOR1 = (int) 146;
    public static final int DELIMITER_SEMICOLON = (int) 1;
    public static final int BINUMDACHANS = (int) 13;
    public static final int INVERTED = (int) 1;
    public static final int BIADCFG = (int) 117;
    public static final int BADDADEVNUM = (int) 13;
    public static final int NOREMOTEACK = (int) 186;
    public static final int BADDIRECTION = (int) 66;
    public static final int PORTUSEDFORTERMINALCOUNTSTATUS = (int) 1004;
    public static final int BADEVENTTYPE = (int) 150;
    public static final int NOTDACONF = (int) 8;
    public static final int BIDIALARMMASK = (int) 230;
    public static final int CAL_TABLE_FACTORY = (int) 0;
    public static final int FIRSTPORTB = (int) 11;
    public static final int FIRSTPORTA = (int) 10;
    public static final int LOADREG = (int) 0;
    public static final int GLOBALINFO = (int) 1;
    public static final int FIRSTPORTC = (int) 12;
    public static final int AUXOUT2 = (int) 0x0400;
    public static final int BADCOUNTERMODE = (int) 180;
    public static final int AUXOUT0 = (int) 0x0100;
    public static final int AUXOUT1 = (int) 0x0200;
    public static final int BIADDATARATE = (int) 362;
    public static final int ADC_SCAN_STOP = (int) 0x0100;
    public static final int AIFUNCTION = (int) 1;
    public static final int DEADADDEV = (int) 5;
    public static final int TRIG_IMMEDIATE = (int) 0;
    public static final int BITCFWVERSION = (int) 170;
    public static final int DOSNOHANDLES = (int) 504;
    public static final int BADBCDFLAG = (int) 65;
    public static final int TRIG_HIGH = (int) 10;
    public static final int INVALIDCONNECTIONCODE = (int) 1021;
    public static final int AI_CHAN_TYPE_CURRENT = (int) 100;
    public static final int DISKISFULL = (int) 33;
    public static final int DONTPRINT = (int) 0;
    public static final int HW_START_TRIG = (int) 0;
    public static final int BIDTBOARD = (int) 17;
    public static final int MAPT5TO2PT5 = (int) 203;
    public static final int CTR_DEBOUNCE3100us = (int) 12;
    public static final int C_INDEX = (int) 0x0040;
    public static final int BISLOTNUM = (int) 201;
    public static final int RTD_PT_3920 = (int) 0x05;
    public static final int NRSE = (int) 0x2000;
    public static final int PERIOD_MODE_BIT_16 = (int) 0x0000;
    public static final int BURSTIO = (int) 0x10000;
    public static final int DOSSEEKERROR = (int) 525;
    public static final int RTD_PT_3928 = (int) 0x06;
    public static final int BADTRIGTHRESHOLD = (int) 120;
    public static final int NOWINDOWSMEMORY = (int) 128;
    public static final int INVALIDSTRUCTSIZE = (int) 346;
    public static final int BICTR12SRC = (int) 163;
    public static final int NO_QUAD = (int) 0;
    public static final int PCI_NO_IRQ = (int) 331;
    public static final int BIDISOFILTER = (int) 122;
    public static final int UNDERRUN = (int) 78;
    public static final int XIGND = (int) 105;
    public static final int DIINITIALIZED = (int) 1;
    public static final int TRIG_PATTERN_NE = (int) 17;
    public static final int ADC_CONVERT = (int) 0x0001;
    public static final int AI_CHAN_TYPE_FULL_BRIDGE_7PT8mVV = (int) 505;
    public static final int BIDACUPDATE = (int) 115;
    public static final int INVALIDNETHOST = (int) 1029;
    public static final int GAIN = (int) 0x01;
    public static final int PADZERO = (int) 15;
    public static final int CARRY_BORROW = (int) 1;
    public static final int START_EVENT = (int) 0;
    public static final int BIDACSAMPLEHOLD = (int) 100;
    public static final int XIVADCHAN = (int) 106;
    public static final int BADRELOAD = (int) 63;
    public static final int NO_NET_BOARD = (int) 351;
    public static final int TIMEFORMAT_12HOUR = (int) 0;
    public static final int ERRSTRLEN = (int) 256;
    public static final int BADCHIPNUM = (int) 82;
    public static final int SF_EQUAL_LIMITA = (int) 0x00;
    public static final int NORMAL_MODE = (int) 0;
    public static final int DTOUT = (int) 2;
    public static final int XIPARENTBOARD = (int) 8;
    public static final int TRIG_FALLING = (int) 15;
    public static final int UNI2VOLTS = (int) 103;
    public static final int PCI_ASSIGN_FAILED = (int) 329;
    public static final int WIN_CANNOT_ENABLE_INT = (int) 603;
    public static final int DEFAULTIO = (int) 0x0000;
    public static final int BICTR10SRC = (int) 161;
    public static final int CONTINUOUSCOUNT = (int) 77;
    public static final int LOWPULSEONTC = (int) 5;
    public static final int BADEUADD = (int) 110;
    public static final int BIPHBCFG = (int) 190;
    public static final int CFGFILE_CANT_OPEN = (int) 308;
    public static final int CANT_GET_PCI_INFO = (int) 342;
    public static final int DIGITALIN = (int) 2;
    public static final int BITCCHANTYPE = (int) 169;
    public static final int NOTADCONF = (int) 9;
    public static final int LOAD_CTR = (int) 1;
    public static final int GATE_POS_HYS = (int) 3;
    public static final int BADEXPCHAN = (int) 71;
    public static final int AI_CHAN_TYPE_RTD_1000OHM_3W = (int) 403;
    public static final int CFGFILE_BAD_REV = (int) 310;
    public static final int CTR_DEBOUNCE300us = (int) 9;
    public static final int INVALIDACCESS = (int) 163;
    public static final int BIADTIMINGMODE = (int) 285;
    public static final int BISBX1INTLEVEL1 = (int) 144;
    public static final int BISBX1INTLEVEL0 = (int) 143;
    public static final int SINGLEIO = (int) 0x0020;
    public static final int XIRESISTANCE = (int) 107;
    public static final int BADCHANTYPE = (int) 172;
    public static final int TCPREVCTR = (int) 0;
    public static final int HIGHUNTILTC = (int) 6;
    public static final int BIINT32PRIORITY = (int) 124;
    public static final int DIREADWRITE = (int) 4;
    public static final int INVALIDBINARYFILE = (int) 348;
    public static final int TIMEZONE_GMT = (int) 1;
    public static final int HIGHONLASTCOUNT = (int) 0;
    public static final int XISPARE0 = (int) 9;
    public static final int NOTODINTS = (int) 0x2000;
    public static final int BIINTEDGE = (int) 265;
    public static final int COMPATWARN = (int) 34;
    public static final int GATE_CLEARS_CTR = (int) 0x80000;
    public static final int SF_UPDATEON_TRUEANDFALSE = (int) 0x08;
    public static final int BADDACHAN = (int) 20;
    public static final int WIN95_CANNOT_SETUP_ISR_DATA = (int) 302;
    public static final int BICLOCK = (int) 5;
    public static final int BTHCONNECTIONFAILED = (int) 1013;
    public static final int SHUNTCAL = (int) 0x400000;
    public static final int BIPRNPORT = (int) 127;
    public static final int ENCODER_MODE_LATCH_ON_Z = (int) 0x0008;
    public static final int BIINT32SRC = (int) 123;
    public static final int BIMEMCOUNT = (int) 126;
    public static final int TIMED = (int) 0x0000;
    public static final int PERIOD_MODE_BIT_48 = (int) 0x10000;
    public static final int RTD_PT_3911 = (int) 0x03;
    public static final int BIT_48 = (int) 0x10000;
    public static final int RTD_PT_3916 = (int) 0x04;
    public static final int BADADCHAN = (int) 16;
    public static final int BISBX0BOARDNUM = (int) 135;
    public static final int BADCONFIGITEM = (int) 105;
    public static final int ADDA2 = (int) 1;
    public static final int BIPWRJMPR = (int) 207;
    public static final int ADDA1 = (int) 0;
    public static final int MA0TO20 = (int) 204;
    public static final int DAS08TOOLOWRATE = (int) 112;
    public static final int HW_RETRIG = (int) 1;
    public static final int BADTICKSIZE = (int) 1008;
    public static final int PERIOD_MODE_BIT_32 = (int) 0x0004;
    public static final int SF_HYSTERESIS = (int) 0x05;
    public static final int COUNT4 = (int) 604;
    public static final int COUNT3 = (int) 603;
    public static final int ADC_SSH = (int) 0x0040;
    public static final int ENCODER_MODE_NO_RECYCLE_OFF = (int) 0x0000;
    public static final int BIRFCHANNEL = (int) 259;
    public static final int AI_CHAN_TYPE_RTD_1000OHM_4W = (int) 401;
    public static final int COUNT2 = (int) 602;
    public static final int COUNT1 = (int) 601;
    public static final int BIDAC0VREF = (int) 108;
    public static final int CANT_MAP_PCM_CIS = (int) 339;
    public static final int DOSINVALIDHANDLE = (int) 506;
    public static final int BICTR14SRC = (int) 165;
    public static final int BIUSERDEVID = (int) 358;
    public static final int XITHERMTYPE = (int) 6;
    public static final int BIADINPUTMODE = (int) 118;
    public static final int MIINTLEVEL = (int) 101;
    public static final int BIPPT005VOLTS = (int) 10;
    public static final int SIGNAL_IN = (int) 2;
    public static final int BINOITEM = (int) 99;
    public static final int ADCCLOCK = (int) 0x100000;
    public static final int GATE_BELOW = (int) 5;
    public static final int WRONGADRANGE = (int) 72;
    public static final int DAC_UPDATE = (int) 0x0200;
    public static final int PULSEWIDTH = (int) 0x0300;
    public static final int ADC_SCANCLK = (int) 0x0020;
    public static final int DTCONNECTERR = (int) 39;
    public static final int BIRTDCHANTYPE = (int) 286;
    public static final int ALARM2CHIP4 = (int) 502;
    public static final int DIFF = (int) 0x4000;
    public static final int ALARM2CHIP3 = (int) 402;
    public static final int ALARM2CHIP2 = (int) 302;
    public static final int ALARM2CHIP1 = (int) 202;
    public static final int ADC_GATE = (int) 0x0002;
    public static final int CTR16 = (int) 3;
    public static final int DECREMENT_ON = (int) 0x0020;
    public static final int BICALOUTPUT = (int) 222;
    public static final int BADTRIGTYPE = (int) 49;
    public static final int MA4TO20 = (int) 200;
    public static final int CTR_DEBOUNCE15500ns = (int) 4;
    public static final int DIGITAL = (int) 16;
    public static final int RESET_CTR = (int) 3;
    public static final int CTR2_CLK = (int) 0x4000;
    public static final int MINLIMITREG0 = (int) 900;
    public static final int AHLPREVGATE = (int) 3;
    public static final int MINLIMITREG1 = (int) 901;
    public static final int CTR_DEBOUNCE3500ns = (int) 2;
    public static final int MINLIMITREG2 = (int) 902;
    public static final int BIADCSETTLETIME = (int) 270;
    public static final int XFER_KERNEL = (int) 0;
    public static final int STOPALL = (int) 2;
    public static final int MINLIMITREG7 = (int) 907;
    public static final int BICALTABLETYPE = (int) 254;
    public static final int BADPORTNUM = (int) 11;
    public static final int CANT_GET_PCM_CCSR = (int) 341;
    public static final int MINLIMITREG3 = (int) 903;
    public static final int DEADDADEV = (int) 4;
    public static final int MINLIMITREG4 = (int) 904;
    public static final int MINLIMITREG5 = (int) 905;
    public static final int DICONFIG = (int) 5;
    public static final int CLOCKTOOSLOW = (int) 102;
    public static final int MINLIMITREG6 = (int) 906;
    public static final int NETDEVNOTFOUND = (int) 1020;
    public static final int BADSPCLGATE = (int) 62;
    public static final int PORTUSEDFORALARM = (int) 170;
    public static final int CANT_GET_PCM_CFG = (int) 340;
    public static final int DS_CONNECTOR = (int) 0x01000;
    public static final int AMBIGPCMSLOTREF = (int) 122;
    public static final int SF_GREATERTHAN_LIMITB = (int) 0x03;
    public static final int EXT_PACER_EDGE_FALLING = (int) 2;
    public static final int FOURTHPORTCH = (int) 25;
    public static final int FOURTHPORTCL = (int) 24;
    public static final int BINUMEXPS = (int) 18;
    public static final int NOSENSORTYPEONGP = (int) 115;
    public static final int UNIPT05VOLTS = (int) 113;
    public static final int MIMEMCOUNT = (int) 103;
    public static final int TOTALIZE = (int) 0x0000;
    public static final int BADRATE = (int) 24;
    public static final int TRIG_PATTERN_EQ = (int) 16;
    public static final int BIADXFERMODE = (int) 306;
    public static final int ENCODER_MODE_NO_RECYCLE_ON = (int) 0x4000;
    public static final int INVALIDNETPORT = (int) 1030;
    public static final int BIADFIFOSIZE = (int) 220;
    public static final int GATE_ABOVE = (int) 4;
    public static final int BICIDEVNUM = (int) 12;
    public static final int NOTDIGITALCONF = (int) 6;
    public static final int BINARY_ENCODING = (int) 2;
    public static final int NOERRORS = (int) 0;
    public static final int CANT_INIT_ISR_INFO = (int) 332;
    public static final int LOAD_OUT_LATCH = (int) 2;
    public static final int PACEROVERRUN = (int) 171;
    public static final int CONTINUOUS = (int) 0x0002;
    public static final int EXTCLOCK = (int) 0x0004;
    public static final int CALIBRATIONFAILED = (int) 1002;
    public static final int UNIPT1VOLTS = (int) 106;
    public static final int CMREXCEEDED = (int) 1035;
    public static final int DIGITAL16 = (int) 2;
    public static final int POSITIVEEDGE = (int) 0;
    public static final int BICTR7SRC = (int) 158;
    public static final int SIXTHPORTCH = (int) 33;
    public static final int UNAVAILABLE = (int) 164;
    public static final int BADRECYCLEFLAG = (int) 64;
    public static final int ANALOG_SE = (int) 8;
    public static final int BIDITRIGCOUNT = (int) 343;
    public static final int CTR_DEBOUNCE500ns = (int) 0;
    public static final int BADBURSTIOCOUNT = (int) 160;
    public static final int AI_CHAN_TYPE_QUART_BRIDGE_120OHM = (int) 502;
    public static final int SIXTHPORTCL = (int) 32;
    public static final int UNIPT2VOLTS = (int) 112;
    public static final int BITCCJCSTATE = (int) 167;
    public static final int DOS_ERR_OFFSET = (int) 500;
    public static final int DIFUNCTION = (int) 3;
    public static final int BIP1PT25VOLTS = (int) 3;
    public static final int BINETIOTIMEOUT = (int) 247;
    public static final int BACKGROUND = (int) 0x0001;
    public static final int SESSIONINUSE = (int) 195;
    public static final int BADINVERTINDEX = (int) 140;
    public static final int DISABLED = (int) 0;
    public static final int ENDOFFILE = (int) 46;
    public static final int CTR_DEBOUNCE25500us = (int) 15;
    public static final int GROUNDED = (int) 16;
    public static final int BADGATECNTRL = (int) 60;
    public static final int TRIG_SCANCOUNT = (int) 6;
    public static final int FREQ1 = (int) 11;
    public static final int FREQ2 = (int) 12;
    public static final int FREQ3 = (int) 13;
    public static final int FREQ4 = (int) 14;
    public static final int CJC = (int) 6;
    public static final int FREQ5 = (int) 15;
    public static final int INDIVIDUAL = (int) 0x0000;
    public static final int FREQ6 = (int) 111;
    public static final int FREQ7 = (int) 112;
    public static final int NO_USB_BOARD = (int) 343;
    public static final int FREQ8 = (int) 113;
    public static final int NOVDDINSTALLED = (int) 127;
    public static final int FREQ9 = (int) 114;
    public static final int EIGHTHPORTCH = (int) 41;
    public static final int SETTLE_1us = (int) 1;
    public static final int DIMASK = (int) 3;
    public static final int BADDEBOUNCETRIGMODE = (int) 178;
    public static final int CELSIUS = (int) 0;
    public static final int BIPPT5VOLTS = (int) 6;
    public static final int WIN31_CANNOT_SETUP_ISR_DATA = (int) 303;
    public static final int BADCALFACTORS = (int) 103;
    public static final int NOCTRSTATUS = (int) 142;
    public static final int XICUSTOMGAIN = (int) 109;
    public static final int NONSTREAMEDIO = (int) 0x040000;
    public static final int CTR1_CLK = (int) 0x2000;
    public static final int CONVERTDMA = (int) 38;
    public static final int CTR48BIT = (int) 0x0200;
    public static final int ON_END_OF_OUTPUT_SCAN = (int) 0x0020;
    public static final int CONTINUOUS_CLK = (int) 1;
    public static final int NOT8536CTR = (int) 90;
    public static final int TRIG_LOW = (int) 11;
    public static final int RANGE_LIMIT_OFF = (int) 0x0000;
    public static final int AHLNEXTGATE = (int) 2;
    public static final int BCD_ENCODING = (int) 1;
    public static final int BIEXCITATION = (int) 353;
    public static final int M1RATEWARNING = (int) 98;
    public static final int BICTLRNUM = (int) 206;
    public static final int FILTER = (int) 0x0000;
    public static final int EQ_LEVEL = (int) 4;
    public static final int VER_FW_RADIO = (int) 2;
    public static final int MA2TO10 = (int) 201;
    public static final int BICTRTRIGCOUNT = (int) 307;
    public static final int PRETRIGGER_IDX = (int) 2;
    public static final int BADCTRREG = (int) 119;
    public static final int TRIG_POS_EDGE = (int) 12;
    public static final int PCI_NO_ADDRESS = (int) 330;
    public static final int CTR_TRIGGER_AFTER_STABLE = (int) 0;
    public static final int XICJCCHAN = (int) 5;
    public static final int RTD_PT_3750 = (int) 0x01;
    public static final int CIBASEADR = (int) 0;
    public static final int END_OF_AO_IDX = (int) 5;
    public static final int DOFUNCTION = (int) 4;
    public static final int STOP_AT_MAX = (int) 0x0002;
    public static final int CICTRTYPE = (int) 2;
    public static final int EXTMEMORY = (int) 0x0800;
    public static final int AUXPORT2 = (int) 3;
    public static final int GATE_LOW = (int) 9;
    public static final int AUXPORT1 = (int) 2;
    public static final int RANGE_LIMIT_ON = (int) 0x2000;
    public static final int DWORDXFER = (int) 0x0200;
    public static final int AUXPORT0 = (int) 1;
    public static final int EIGHTHPORTCL = (int) 40;
    public static final int BIP10VOLTS = (int) 1;
    public static final int BICTR3SRC = (int) 130;
    public static final int INDEX_DISABLED = (int) 0;
    public static final int BIUSERDEVIDNUM = (int) 365;
    public static final int C_UNDERFLOW = (int) 0x0001;
    public static final int ENCODER_MODE_BIT_32 = (int) 0x0004;
    public static final int BIDACRANGE = (int) 114;
    public static final int NO_RECYCLE_OFF = (int) 0x0000;
    public static final int AI_CHAN_TYPE_FULL_BRIDGE_62PT5mVV = (int) 504;
    public static final int SW_START_TRIG = (int) 2;
    public static final int DIGITALOUT = (int) 1;
    public static final int CICTRNUM = (int) 3;
    public static final int INVALIDSETPOINTOUTPUTVALUE = (int) 191;
    public static final int NOBOARDNAMEFILE = (int) 125;
    public static final int BADTRIGEVENT = (int) 1015;
    public static final int CTR_TICK20833PT3ns = (int) 3;
    public static final int PULSEWIDTH_MODE_BIT_48 = (int) 0x10000;
    public static final int SIGNAL_OUT = (int) 4;
    public static final int INTERNALERR = (int) 200;
    public static final int RECYCLE = (int) 1;
    public static final int CTR_DEBOUNCE31500ns = (int) 5;
    public static final int XIIEXE = (int) 111;
    public static final int GINUMEXPBOARDS = (int) 40;
    public static final int BAD_OUTP_REG = (int) 316;
    public static final int BAD_CTRL_REG = (int) 315;
    public static final int BIMEMSIZE = (int) 125;
    public static final int ENCODER_MODE_BIT_48 = (int) 0x10000;
    public static final int BIPATTERNTRIGPORT = (int) 345;
    public static final int INPUTTIMEOUT = (int) 187;
    public static final int MIMEMSIZE = (int) 102;
    public static final int BADDEBOUNCETIME = (int) 177;
    public static final int STOP_EVENT = (int) 1;
    public static final int DICURVAL = (int) 7;
    public static final int BIDACFORCESENSE = (int) 250;
    public static final int BISBX0ADDRESS = (int) 136;
    public static final int SIXTHPORTB = (int) 31;
    public static final int SIXTHPORTA = (int) 30;
    public static final int UNIPOLAR = (int) 300;
    public static final int ALARM1CHIP4 = (int) 501;
    public static final int CTR_DEBOUNCE700us = (int) 10;
    public static final int INVALIDSETPOINTLEVEL = (int) 189;
    public static final int CREATE_BOARD_FAILURE = (int) 306;
    public static final int ALARM1CHIP2 = (int) 301;
    public static final int BIBURSTMODE = (int) 212;
    public static final int ALARM1CHIP3 = (int) 401;
    public static final int LATCH_ON_SOS = (int) 0x0000;
    public static final int ENCODER_MODE_BIT_16 = (int) 0x0000;
    public static final int ALARM1CHIP1 = (int) 201;
    public static final int BIBNCSRC = (int) 210;
    public static final int GATE_CONTROLS_DIR = (int) 0x40000;
    public static final int RISING_EDGE = (int) 0;
    public static final int DELIMITER_TAB = (int) 3;
    public static final int NO_PCI_BIOS = (int) 326;
    public static final int NO_RECYCLE_ON = (int) 0x4000;
    public static final int GATE_HIGH = (int) 8;
    public static final int BADSOURCE = (int) 56;
    public static final int BIMFGSERIALNUM = (int) 224;
    public static final int BINUMTEMPCHANS = (int) 208;
    public static final int DGND = (int) 0x8000;
    public static final int BIPCIREVID = (int) 225;
    public static final int BISYNCMODE = (int) 251;
    public static final int CTR_TICK200ns = (int) 11;
    public static final int CFGFILE_BAD_ID = (int) 309;
    public static final int WRONGDIGCONFIG = (int) 42;
    public static final int DELIMITER_COMMA = (int) 0;
    public static final int CTR16BIT = (int) 0x0000;
    public static final int GETNEXT = (int) -3;
    public static final int TRIG_DIGPATTERN = (int) 4;
    public static final int BINUMADCHANS = (int) 7;
    public static final int BIPPT312VOLTS = (int) 17;
    public static final int BISBX1DMACHAN = (int) 142;
    public static final int PULSEWIDTH_MODE_BIT_32 = (int) 0x0004;
    public static final int CTR_RISING_EDGE = (int) 0;
    public static final int BADINITIALDELAY = (int) 199;
    public static final int PULSEWIDTH_MODE_BIT_16 = (int) 0x0000;
    public static final int NORMMEMORY = (int) 0x0000;
    public static final int CTR_TICK208PT3ns = (int) 1;
    public static final int X4_QUAD = (int) 4;
    public static final int ENCODER_MODE_RANGE_LIMIT_ON = (int) 0x2000;
    public static final int LATCH_ON_MAP = (int) 0x0008;
    public static final int CTR_DEBOUNCE6300us = (int) 13;
    public static final int ON_SCAN_ERROR = (int) 0x0001;
    public static final int BIDEVSERIALNUM = (int) 363;
    public static final int BADPOINTER = (int) 35;
    public static final int INVALIDLOGIN = (int) 194;
    public static final int DTIN = (int) 0;
    public static final int BITERMCOUNTSTATBIT = (int) 360;
    public static final int BIP5VOLTS = (int) 0;
    public static final int NOBACKGROUND = (int) 107;
    public static final int SF_INSIDE_LIMITS = (int) 0x02;
    public static final int OUTPUTVAL1REG1 = (int) 1201;
    public static final int OUTPUTVAL1REG2 = (int) 1202;
    public static final int OUTPUTVAL1REG0 = (int) 1200;
    public static final int DIDEVTYPE = (int) 2;
    public static final int BADTCCHANMODE = (int) 181;
    public static final int DIFFERENTIAL = (int) 0;
    public static final int BAD_RDBK_REG = (int) 317;
    public static final int AI_CHAN_TYPE_HALF_BRIDGE = (int) 503;
    public static final int DOSTOOMANYFILES = (int) 518;
    public static final int DECREMENT_OFF = (int) 0x0000;
    public static final int NOCALIBRATEDATA = (int) 0x8000;
    public static final int DINUMBITS = (int) 6;
    public static final int PERIOD = (int) 0x0200;
    public static final int ALLGATE = (int) 5;
    public static final int OUTPUTVAL1REG7 = (int) 1207;
    public static final int OUTPUTVAL1REG5 = (int) 1205;
    public static final int DOSNOMEMORY = (int) 507;
    public static final int OUTPUTVAL1REG6 = (int) 1206;
    public static final int OUTPUTVAL1REG3 = (int) 1203;
    public static final int OUTPUTVAL1REG4 = (int) 1204;
    public static final int BIPPT078VOLTS = (int) 19;
    public static final int BADDIVIDER = (int) 55;
    public static final int NOCLEAR = (int) 0x0800;
    public static final int BICTR5SRC = (int) 132;
    public static final int SETTLE_5us = (int) 2;
    public static final int RATEGENERATOR = (int) 2;
    public static final int NE_LEVEL = (int) 5;
    public static final int BADMAPPEDCOUNTER = (int) 179;
    public static final int MA1TO5 = (int) 202;
    public static final int GETFIRST = (int) -2;
    public static final int UPDATEONCOMMAND = (int) 1;
    public static final int BADCONNECTION = (int) 157;
    public static final int TRIG_RISING = (int) 14;
    public static final int BIPARENTBOARD = (int) 16;
    public static final int MAX_CONNECTIONS = (int) 4;
    public static final int BIP1PT67VOLTS = (int) 11;
    public static final int SCALEDATA = (int) 0x0010;
    public static final int IDLE_HIGH = (int) 1;
    public static final int SO_NONE = (int) 0;
    public static final int SF_LESSTHAN_LIMITA = (int) 0x01;
    public static final int BADPRETRIGCOUNT = (int) 53;
    public static final int BADTRIGVALUE = (int) 50;
    public static final int WAITFORNEWDATA = (int) 0x2000;
    public static final int LOW_LEVEL = (int) 7;
    public static final int COUNT_DOWN_OFF = (int) 0x00000;
    public static final int MBUSINUSE = (int) 148;
    public static final int GATE_NEG_HYS = (int) 2;
    public static final int BIP15VOLTS = (int) 21;
    public static final int ENABLED = (int) 1;
    public static final int DOSDRIVENOTREADY = (int) 521;
    public static final int SETTLE_1ms = (int) 4;
    public static final int CTR = (int) 17;
    public static final int BADSENSORTYPE = (int) 123;
    public static final int ONETIME = (int) 0;
    public static final int DAC_TB_SRC = (int) 0x0400;
    public static final int BADCONFIGTYPE = (int) 104;
    public static final int CTRFUNCTION = (int) 5;
    public static final int BOARDINFO = (int) 2;
    public static final int TOOFEW = (int) 28;
    public static final int SETTLE_DEFAULT = (int) 0;
    public static final int EIGHTHPORTB = (int) 39;
    public static final int ODDCHAN = (int) 88;
    public static final int INTERRUPTED = (int) 92;
    public static final int EIGHTHPORTA = (int) 38;
    public static final int MISMATCHSETPOINTCOUNT = (int) 188;
    public static final int TIMING_MODE_INVERT_GATE = (int) 0x20000;
    public static final int NOT8254CTR = (int) 47;
    public static final int DEADDIGITALDEV = (int) 2;
    public static final int ENCODER_MODE_RANGE_LIMIT_OFF = (int) 0x0000;
    public static final int CTR_TICK20PT83ns = (int) 0;
    public static final int RSE = (int) 0x1000;
    public static final int BIBASEADR = (int) 0;
    public static final int DMA_IN_USE = (int) 202;
    public static final int BOARDNAMELEN = (int) 64;
    public static final int BADMEMMODE = (int) 79;
    public static final int BADLOADVAL = (int) 1007;
    public static final int NO_PCI_BOARD = (int) 328;
    public static final int INVALIDIFC = (int) 1031;
    public static final int FALLING_EDGE = (int) 1;
    public static final int BICHANCFG = (int) 149;
    public static final int EVENODDMISMATCH = (int) 97;
    public static final int CONNECTIONCODEIGNORED = (int) 1022;
    public static final int CFGFILENOTFOUND = (int) 126;
    public static final int NOCONNECTION = (int) 159;
    public static final int NOQUEUE = (int) 76;
    public static final int UPDOWN_OFF = (int) 0x0000;
    public static final int MAXLIMITREG6 = (int) 1006;
    public static final int MAXLIMITREG5 = (int) 1005;
    public static final int OUTP_REG_FAIL = (int) 322;
    public static final int MAXLIMITREG7 = (int) 1007;
    public static final int MAXLIMITREG2 = (int) 1002;
    public static final int AHLTCPREVCTR = (int) 1;
    public static final int MAXLIMITREG1 = (int) 1001;
    public static final int MAXLIMITREG4 = (int) 1004;
    public static final int BADCOUNT = (int) 17;
    public static final int MAXLIMITREG3 = (int) 1003;
    public static final int DOSGENERALFAULT = (int) 531;
    public static final int MISCINFO = (int) 6;
    public static final int MAXLIMITREG0 = (int) 1000;
    public static final int INVALIDEXTPACEREDGE = (int) 1034;
    public static final int IDLE_LOW = (int) 0;
    public static final int XIRANGE1 = (int) 3;
    public static final int XIRANGE2 = (int) 4;
    public static final int TRIGBELOW = (int) 1;
    public static final int ONESHOT = (int) 1;
    public static final int X2_QUAD = (int) 2;
    public static final int OUTPUT_INITIAL_STATE_LOW = (int) 0x000000;
    public static final int NOTCONFIGURABLE = (int) 43;
    public static final int WIN_CANNOT_DISABLE_INT = (int) 605;
    public static final int UPDOWN_ON = (int) 0x1000;
    public static final int BICOMADDR2 = (int) 151;
    public static final int PERIOD_MODE_X1 = (int) 0x0000;
    public static final int SOFTWARESTROBE = (int) 4;
    public static final int RTD_CUSTOM = (int) 0x00;
    public static final int FOREGROUND = (int) 0x0000;
    public static final int NOEXTPOWER = (int) 196;
    public static final int CTR_TICK20000ns = (int) 13;
    public static final int CTR64BIT = (int) 0x0400;
    public static final int CANT_START_DMA = (int) 336;
    public static final int NOCBUL32SYS = (int) 132;
    public static final int CTR32BIT = (int) 0x0100;
    public static final int BIADTRIGSRC = (int) 209;
    public static final int INTERNAL32_ERR = (int) 300;
    public static final int HOLDREG20 = (int) 120;
    public static final int NOTSIMULCONF = (int) 96;
    public static final int NOEXTCONTINUOUS = (int) 117;
    public static final int CTR_TICK2083PT3ns = (int) 2;
    public static final int VER_FW_MEASUREMENT_EXP = (int) 4;
    public static final int BOARDNOTEXIST = (int) 1028;
    public static final int BIDITHERON = (int) 213;
    public static final int VER_FPGA = (int) 3;
    public static final int BADOUTCONTROL = (int) 67;
    public static final int BITEMPREJFREQ = (int) 121;
    public static final int DAQOFUNCTION = (int) 7;
    public static final int BICTR2SRC = (int) 106;
    public static final int BIDACINSTALLED = (int) 116;
    public static final int RUNNING = (int) 1;
    public static final int CANT_UNINSTALL_INT = (int) 335;
    public static final int BIADSOURCE = (int) 221;
    public static final int CLEAR_ON_READ = (int) 0x0001;
    public static final int CONVERT16BITS = (int) 84;
    public static final int INVALIDAIINPUTMODE = (int) 1032;
    public static final int FIFTHPORTB = (int) 27;
    public static final int FIFTHPORTA = (int) 26;
    public static final int ALL_EVENT_TYPES = (int) 0xffff;
    public static final int BIDIDEVNUM = (int) 10;
    public static final int LATCH_ON_Z = (int) 0x0008;
    public static final int AOFUNCTION = (int) 2;
    public static final int NOTWINDOWSFUNC = (int) 95;
    public static final int CFGFILE_NOREPLACE = (int) 312;
    public static final int NO_OUTP_REG = (int) 319;
    public static final int UNI1VOLTS = (int) 105;
    public static final int NEGATIVEEDGE = (int) 1;
    public static final int BADOPTION = (int) 52;
    public static final int X1_QUAD = (int) 1;
    public static final int BADCOMPARE = (int) 57;
    public static final int EXT_PACER_EDGE_RISING = (int) 1;
    public static final int DEVALREADYCREATED = (int) 1027;
    public static final int BMCONTINUOUSCOUNT = (int) 146;
    public static final int FAHRENHEIT = (int) 1;
    public static final int FROMHERE = (int) -1;
    public static final int CTRL_REG_FAIL = (int) 321;
    public static final int BI9513CHIPNSRC = (int) 103;
    public static final int BITEMPMODE = (int) 120;
    public static final int CLEAR_ON_Z_OFF = (int) 0x0000;
    public static final int DIGNOTENABLED = (int) 83;
    public static final int GATE_IN_WINDOW = (int) 6;
    public static final int HOLDREG13 = (int) 113;
    public static final int HOLDREG12 = (int) 112;
    public static final int HOLDREG11 = (int) 111;
    public static final int UNI2PT5VOLTS = (int) 102;
    public static final int HOLDREG10 = (int) 110;
    public static final int BIDEVVERSION = (int) 359;
    public static final int HOLDREG17 = (int) 117;
    public static final int HOLDREG16 = (int) 116;
    public static final int HOLDREG15 = (int) 115;
    public static final int HOLDREG14 = (int) 114;
    public static final int SECONDPORTB = (int) 15;
    public static final int HOLDREG19 = (int) 119;
    public static final int SECONDPORTA = (int) 14;
    public static final int HOLDREG18 = (int) 118;
    public static final int DAC_START_TRIG = (int) 0x0800;
    public static final int DIDISABLEDIRCHECK = (int) 13;
    public static final int C_UP_DOWN = (int) 0x0020;
    public static final int BIDEVMACADDR = (int) 364;
    public static final int CICONFIGBYTE = (int) 4;
    public static final int FOURTHPORTA = (int) 22;
    public static final int FOURTHPORTB = (int) 23;
    public static final int OPENCONNECTION = (int) 145;
    public static final int BIDACRES = (int) 292;
    public static final int NOTREADY = (int) 165;
    public static final int BISBX1BOARDNUM = (int) 140;
    public static final int UNI4VOLTS = (int) 114;
    public static final int BIDMACHAN = (int) 3;
    public static final int XFER_USER = (int) 1;
    public static final int BADBRIDGETYPE = (int) 1006;
    public static final int FREQOVERRUN = (int) 80;
    public static final int AI_CHAN_TYPE_RESISTANCE_10K4W = (int) 201;
    public static final int NOPCMREGKEY = (int) 131;
    public static final int XICHANCONFIG = (int) 101;
    public static final int CANT_LOCK_DMA_BUF = (int) 201;
    public static final int BIT_NOT_ZERO = (int) 313;
    public static final int INVERT_GATE = (int) 0x20000;
    public static final int GATE_OUT_WINDOW = (int) 7;
    public static final int THIRDPORTCH = (int) 21;
    public static final int BAD_PCI_INDEX = (int) 327;
    public static final int BICTR11SRC = (int) 162;
    public static final int BIPHACFG = (int) 180;
    public static final int MEMBOARDPROGERROR = (int) 211;
    public static final int THIRDPORTCL = (int) 20;
    public static final int INVALIDSETPOINTLIMITS = (int) 192;
    public static final int SETPOINT_ENABLE = (int) 0x100;
    public static final int HARDWARESTROBE = (int) 5;
    public static final int TIMING = (int) 0x0400;
    public static final int AI_CHAN_TYPE_TC = (int) 300;
    public static final int CTR_DEBOUNCE12700us = (int) 14;
    public static final int CTRBANK0 = (int) 11;
    public static final int NO_MEMORY_FOR_BUFFER = (int) 301;
    public static final int CTRBANK1 = (int) 12;
    public static final int BIPPT025VOLTSPERVOLT = (int) 400;
    public static final int BIHIDELOGINDLG = (int) 274;
    public static final int CTRBANK2 = (int) 13;
    public static final int CTRBANK3 = (int) 14;
    public static final int UNI1PT25VOLTS = (int) 104;
    public static final int SO_DAC1 = (int) 3;
    public static final int SECONDPORTCH = (int) 17;
    public static final int SO_DAC2 = (int) 4;
    public static final int PERIOD_MODE_GATING_ON = (int) 0x0010;
    public static final int BICINUMDEVS = (int) 11;
    public static final int SO_DAC0 = (int) 2;
    public static final int BIBNCTHRESHOLD = (int) 211;
    public static final int SECONDPORTCL = (int) 16;
    public static final int BIP2PT5VOLTS = (int) 2;
    public static final int BITUSEDFORTERMINALCOUNTSTATUS = (int) 1003;
    public static final int BIPPT25VOLTS = (int) 12;
    public static final int BIPOLAR = (int) 301;
    public static final int BIRSS = (int) 261;
    public static final int SETPOINTSTATUS = (int) 10;
    public static final int DOSACCESSDENIED = (int) 505;
    public static final int TRIG_COUNTER = (int) 5;
    public static final int BICTR9SRC = (int) 160;
    public static final int BINETCONNECTCODE = (int) 341;
    public static final int NONEENABLED = (int) 69;
    public static final int NUM_EVENT_TYPES = (int) 6;
    public static final int ENCODER_MODE_MODULO_N_OFF = (int) 0x0000;
    public static final int BRIDGE_QUARTER = (int) 3;
    public static final int BISERIALNUM = (int) 214;
    public static final int AI_CHAN_TYPE_RESISTANCE_10K2W = (int) 203;
    public static final int SO_DAC3 = (int) 5;
    public static final int BADFLAGPINS = (int) 141;
    public static final int DEADCOUNTERDEV = (int) 3;
    public static final int KELVIN = (int) 2;
    public static final int MODULO_N_OFF = (int) 0x0000;
    public static final int BIHTTPPORT = (int) 273;
    public static final int CLEAR_ON_Z_ON = (int) 0x0020;
    public static final int LOADANDHOLDREG = (int) 1;
    public static final int BADBOARDTYPE = (int) 41;
    public static final int NOCONVERSIONNEEDED = (int) 116;
    public static final int DOSWRITEPROTECT = (int) 519;
    public static final int BADRANGE = (int) 30;
    public static final int SEVENTHPORTCL = (int) 36;
    public static final int BADCNTRCONFIG = (int) 18;
    public static final int TIMING_MODE_BIT_16 = (int) 0x0000;
    public static final int SEVENTHPORTCH = (int) 37;
    public static final int NETDEVINUSE = (int) 1023;
    public static final int BICHANTCTYPE = (int) 347;
    public static final int BADBITNUMBER = (int) 68;
    public static final int BIDAQITRIGCOUNT = (int) 308;
    public static final int ON_PRETRIGGER = (int) 0x0004;
    public static final int DIGITAL8 = (int) 1;
    public static final int DEADDEV = (int) 161;
    public static final int HIGHPULSEONTC = (int) 1;
    public static final int NOPRETRIGMODE = (int) 176;
    public static final int DEVELOPMENT_OPTION = (int) 307;
    public static final int BELOW_LEVEL = (int) 3;
    public static final int C_SIGN = (int) 0x0008;
    public static final int BITRIGEDGE = (int) 113;
    public static final int BADERRCODE = (int) 75;
    public static final int BADTRIGLEVEL = (int) 175;
    public static final int PULSEWIDTH_MODE_GATING_ON = (int) 0x0010;
    public static final int ON_EXTERNAL_INTERRUPT = (int) 0x0002;
    public static final int BADCALLBACKFUNC = (int) 147;
    public static final int NOGATE = (int) 0;
    public static final int TIMING_MODE_BIT_48 = (int) 0x10000;
    public static final int BADPORTCONFIG = (int) 44;
    public static final int NOSELECTORS = (int) 93;
    public static final int XI5VOLTSOURCE = (int) 100;
    public static final int NONETIFC = (int) 184;
    public static final int DIBASEADR = (int) 0;
    public static final int DOSREADFAULT = (int) 530;
    public static final int SF_OUTSIDE_LIMITS = (int) 0x04;
    public static final int ANALOG = (int) 0;
    public static final int UNI10VOLTS = (int) 100;
    public static final int DONTSTOP = (int) 0;
    public static final int ADC_STOP_TRIG = (int) 0x0008;
    public static final int AMBIGSENSORONGP = (int) 114;
    public static final int BIPWRUPSTATE = (int) 203;
    public static final int TIMEZONE_LOCAL = (int) 0;
    public static final int TIMING_MODE_BIT_32 = (int) 0x0004;
    public static final int NOTEDSSENSOR = (int) 1000;
    public static final int SINGLEEXEC = (int) 0x0000;
    public static final int TOGGLEONTC = (int) 2;
    public static final int GINUMBOARDS = (int) 38;
    public static final int ANALOG_DIFF = (int) 9;
    public static final int BADTIMEOFDAY = (int) 58;
    public static final int NOTDOSFUNC = (int) 100;
    public static final int BIADCHANTYPE = (int) 355;
    public static final int BLOCKIO = (int) 0x0060;
    public static final int BADTRIGSENSE = (int) 173;
    public static final int SF_UPDATEON_TRUEONLY = (int) 0x00;
    public static final int PRINTWARNINGS = (int) 1;
    public static final int TRIG_NEG_EDGE = (int) 13;
    public static final int BICTR0SRC = (int) 104;
    public static final int SO_DIGITALPORT = (int) 1;
    public static final int BRIDGE_HALF = (int) 2;
    public static final int BADSAMPLEMODE = (int) 14;
    public static final int ENCODER_MODE_CLEAR_ON_Z_OFF = (int) 0x0000;
    public static final int BICTSRTS1 = (int) 152;
    public static final int IDLE = (int) 0;
    public static final int AHEGATE = (int) 6;
    public static final int TRIGABOVE = (int) 0;
    public static final int BICTSRTS2 = (int) 153;
    public static final int BITCCHANRANGE = (int) 168;
    public static final int NOINDEXALLOWED = (int) 144;
    public static final int BIPPT05VOLTS = (int) 8;
    public static final int PERIOD_MODE_X100 = (int) 0x0002;
    public static final int BADAIMODE = (int) 155;
    public static final int PRINTFATAL = (int) 2;
    public static final int SINGLE_ENDED = (int) 1;
    public static final int BADCOUNTEREDGE = (int) 61;

    /**
     * Original signature : <code>int cbACalibrateData(int, long, int, USHORT*)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1542
     */
    int cbACalibrateData(int BoardNum, NativeLong NumPoints, int Gain, ShortBuffer ADData);

    /**
     * Original signature : <code>int cbGetRevision(float*, float*)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1544
     */
    int cbGetRevision(FloatBuffer RevNum, FloatBuffer VxDRevNum);

    ;

    /**
     * Original signature : <code>int cbLoadConfig(char*)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1545
     */
    int cbLoadConfig(ByteBuffer CfgFileName);

    /**
     * Original signature : <code>int cbSaveConfig(char*)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1546
     */
    int cbSaveConfig(ByteBuffer CfgFileName);

    /**
     * Original signature : <code>int cbAConvertData(int, long, USHORT*, USHORT*)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1547
     */
    int cbAConvertData(int BoardNum, NativeLong NumPoints, ShortBuffer ADData, ShortBuffer ChanTags);

    /**
     * Original signature : <code>int cbAConvertPretrigData(int, long, long, USHORT*, USHORT*)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1549
     */
    int cbAConvertPretrigData(int BoardNum, NativeLong PreTrigCount, NativeLong TotalCount, ShortBuffer ADData, ShortBuffer ChanTags);

    /**
     * Original signature : <code>int cbAIn(int, int, int, USHORT*)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1552
     */
    int cbAIn(int BoardNum, int Chan, int Gain, ShortBuffer DataValue);

    /**
     * Original signature : <code>int cbAIn32(int, int, int, ULONG*, int)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1553
     */
    int cbAIn32(int BoardNum, int Chan, int Gain, NativeLongByReference DataValue, int Options);

    /**
     * Original signature : <code>int cbAInScan(int, int, int, long, long*, int, HGLOBAL, int)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1554
     */
    int cbAInScan(int BoardNum, int LowChan, int HighChan, NativeLong Count, NativeLongByReference Rate, int Gain, MeasurementComputingUniversalLibrary.HGLOBAL MemHandle, int Options);

    /**
     * Original signature : <code>int cbALoadQueue(int, short*, short*, int)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1557
     */
    int cbALoadQueue(int BoardNum, ShortBuffer ChanArray, ShortBuffer GainArray, int NumChans);

    /**
     * Original signature : <code>int cbAOut(int, int, int, USHORT)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1559
     */
    int cbAOut(int BoardNum, int Chan, int Gain, short DataValue);

    /**
     * Original signature : <code>int cbAOutScan(int, int, int, long, long*, int, HGLOBAL, int)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1560
     */
    int cbAOutScan(int BoardNum, int LowChan, int HighChan, NativeLong Count, NativeLongByReference Rate, int Gain, MeasurementComputingUniversalLibrary.HGLOBAL MemHandle, int Options);

    /**
     * Original signature : <code>int cbAPretrig(int, int, int, long*, long*, long*, int, HGLOBAL, int)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1563
     */
    int cbAPretrig(int BoardNum, int LowChan, int HighChan, NativeLongByReference PreTrigCount, NativeLongByReference TotalCount, NativeLongByReference Rate, int Gain, MeasurementComputingUniversalLibrary.HGLOBAL MemHandle, int Options);

    /**
     * Original signature : <code>int cbATrig(int, int, int, USHORT, int, USHORT*)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1566
     */
    int cbATrig(int BoardNum, int Chan, int TrigType, short TrigValue, int Gain, ShortBuffer DataValue);

    /**
     * Original signature : <code>int cbC7266Config(int, int, int, int, int, int, int, int, int)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1568
     */
    int cbC7266Config(int BoardNum, int CounterNum, int Quadrature, int CountingMode, int DataEncoding, int IndexMode, int InvertIndex, int FlagPins, int GateEnable);

    /**
     * Original signature : <code>int cbC8254Config(int, int, int)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1571
     */
    int cbC8254Config(int BoardNum, int CounterNum, int Config);

    /**
     * Original signature : <code>int cbC8536Config(int, int, int, int, int)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1572
     */
    int cbC8536Config(int BoardNum, int CounterNum, int OutputControl, int RecycleMode, int TrigType);

    /**
     * Original signature : <code>int cbC9513Config(int, int, int, int, int, int, int, int, int, int, int)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1574
     */
    int cbC9513Config(int BoardNum, int CounterNum, int GateControl, int CounterEdge, int CountSource, int SpecialGate, int Reload, int RecycleMode, int BCDMode, int CountDirection, int OutputControl);

    /**
     * Original signature : <code>int cbC8536Init(int, int, int)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1579
     */
    int cbC8536Init(int BoardNum, int ChipNum, int Ctr1Output);

    /**
     * Original signature : <code>int cbC9513Init(int, int, int, int, int, int, int)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1580
     */
    int cbC9513Init(int BoardNum, int ChipNum, int FOutDivider, int FOutSource, int Compare1, int Compare2, int TimeOfDay);

    /**
     * Original signature : <code>int cbCFreqIn(int, int, int, USHORT*, long*)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1583
     */
    int cbCFreqIn(int BoardNum, int SigSource, int GateInterval, ShortBuffer Count, NativeLongByReference Freq);

    /**
     * Original signature : <code>int cbCIn(int, int, USHORT*)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1585
     */
    int cbCIn(int BoardNum, int CounterNum, ShortBuffer Count);

    /**
     * Original signature : <code>int cbCIn32(int, int, ULONG*)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1586
     */
    int cbCIn32(int BoardNum, int CounterNum, NativeLongByReference Count);

    /**
     * Original signature : <code>int cbCIn64(int, int, ULONGLONG*)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1587
     */
    int cbCIn64(int BoardNum, int CounterNum, LongBuffer Count);

    /**
     * Original signature : <code>int cbCLoad(int, int, unsigned int)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1588
     */
    int cbCLoad(int BoardNum, int RegNum, int LoadValue);

    /**
     * Original signature : <code>int cbCLoad32(int, int, ULONG)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1589
     */
    int cbCLoad32(int BoardNum, int RegNum, NativeLong LoadValue);

    /**
     * Original signature : <code>int cbCLoad64(int, int, ULONGLONG)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1590
     */
    int cbCLoad64(int BoardNum, int RegNum, long LoadValue);

    /**
     * Original signature : <code>int cbCStatus(int, int, ULONG*)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1591
     */
    int cbCStatus(int BoardNum, int CounterNum, NativeLongByReference StatusBits);

    /**
     * Original signature : <code>int cbCStoreOnInt(int, int, short*, HGLOBAL)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1592
     */
    int cbCStoreOnInt(int BoardNum, int IntCount, ShortBuffer CntrControl, MeasurementComputingUniversalLibrary.HGLOBAL MemHandle);

    /**
     * Original signature : <code>int cbCInScan(int, int, int, long, long*, HGLOBAL, ULONG)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1594
     */
    int cbCInScan(int BoardNum, int FirstCtr, int LastCtr, NativeLong Count, NativeLongByReference Rate, MeasurementComputingUniversalLibrary.HGLOBAL MemHandle, NativeLong Options);

    /**
     * Original signature : <code>int cbCConfigScan(int, int, int, int, int, int, int, int)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1596
     */
    int cbCConfigScan(int BoardNum, int CounterNum, int Mode, int DebounceTime, int DebounceMode, int EdgeDetection, int TickSize, int MappedChannel);

    /**
     * Original signature : <code>int cbCClear(int, int)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1599
     */
    int cbCClear(int BoardNum, int CounterNum);

    /**
     * Original signature : <code>int cbTimerOutStart(int, int, double*)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1600
     */
    int cbTimerOutStart(int BoardNum, int TimerNum, DoubleBuffer Frequency);

    /**
     * Original signature : <code>int cbTimerOutStop(int, int)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1601
     */
    int cbTimerOutStop(int BoardNum, int TimerNum);

    /**
     * Original signature : <code>int cbPulseOutStart(int, int, double*, double*, unsigned int, double*, int, int)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1602
     */
    int cbPulseOutStart(int BoardNum, int TimerNum, DoubleBuffer Frequency, DoubleBuffer DutyCycle, int PulseCount, DoubleBuffer InitialDelay, int IdleState, int Options);

    /**
     * Original signature : <code>int cbPulseOutStop(int, int)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1603
     */
    int cbPulseOutStop(int BoardNum, int TimerNum);

    /**
     * Original signature : <code>int cbDBitIn(int, int, int, USHORT*)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1604
     */
    int cbDBitIn(int BoardNum, int PortType, int BitNum, ShortBuffer BitValue);

    /**
     * Original signature : <code>int cbDBitOut(int, int, int, USHORT)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1606
     */
    int cbDBitOut(int BoardNum, int PortType, int BitNum, short BitValue);

    /**
     * Original signature : <code>int cbDConfigPort(int, int, int)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1607
     */
    int cbDConfigPort(int BoardNum, int PortType, int Direction);

    /**
     * Original signature : <code>int cbDConfigBit(int, int, int, int)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1608
     */
    int cbDConfigBit(int BoardNum, int PortType, int BitNum, int Direction);

    /**
     * Original signature : <code>int cbDIn(int, int, USHORT*)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1609
     */
    int cbDIn(int BoardNum, int PortType, ShortBuffer DataValue);

    /**
     * Original signature : <code>int cbDIn32(int, int, UINT*)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1610
     */
    int cbDIn32(int BoardNum, int PortType, IntBuffer DataValue);

    /**
     * Original signature : <code>int cbDInScan(int, int, long, long*, HGLOBAL, int)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1611
     */
    int cbDInScan(int BoardNum, int PortType, NativeLong Count, NativeLongByReference Rate, MeasurementComputingUniversalLibrary.HGLOBAL MemHandle, int Options);

    /**
     * Original signature : <code>int cbDOut(int, int, USHORT)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1613
     */
    int cbDOut(int BoardNum, int PortType, short DataValue);

    /**
     * Original signature : <code>int cbDOut32(int, int, UINT)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1614
     */
    int cbDOut32(int BoardNum, int PortType, int DataValue);

    /**
     * Original signature : <code>int cbDOutScan(int, int, long, long*, HGLOBAL, int)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1615
     */
    int cbDOutScan(int BoardNum, int PortType, NativeLong Count, NativeLongByReference Rate, MeasurementComputingUniversalLibrary.HGLOBAL MemHandle, int Options);

    /**
     * Original signature : <code>int cbDInArray(int, int, int, ULONG*)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1617
     */
    int cbDInArray(int BoardNum, int LowPort, int HighPort, NativeLongByReference DataArray);

    /**
     * Original signature : <code>int cbDOutArray(int, int, int, ULONG*)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1618
     */
    int cbDOutArray(int BoardNum, int LowPort, int HighPort, NativeLongByReference DataArray);

    /**
     * Original signature : <code>int cbDClearAlarm(int, int, UINT)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1619
     */
    int cbDClearAlarm(int BoardNum, int PortType, int Mask);

    /**
     * Original signature : <code>int cbErrHandling(int, int)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1620
     */
    int cbErrHandling(int ErrReporting, int ErrHandling);

    /**
     * Original signature : <code>int cbFileAInScan(int, int, int, long, long*, int, char*, int)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1621
     */
    int cbFileAInScan(int BoardNum, int LowChan, int HighChan, NativeLong Count, NativeLongByReference Rate, int Gain, ByteBuffer FileName, int Options);

    /**
     * Original signature : <code>int cbFileGetInfo(char*, short*, short*, long*, long*, long*, int*)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1624
     */
    int cbFileGetInfo(ByteBuffer FileName, ShortBuffer LowChan, ShortBuffer HighChan, NativeLongByReference PreTrigCount, NativeLongByReference TotalCount, NativeLongByReference Rate, IntBuffer Gain);

    /**
     * Original signature : <code>int cbFilePretrig(int, int, int, long*, long*, long*, int, char*, int)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1627
     */
    int cbFilePretrig(int BoardNum, int LowChan, int HighChan, NativeLongByReference PreTrigCount, NativeLongByReference TotalCount, NativeLongByReference Rate, int Gain, ByteBuffer FileName, int Options);

    /**
     * Original signature : <code>int cbFileRead(char*, long, long*, USHORT*)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1631
     */
    int cbFileRead(ByteBuffer FileName, NativeLong FirstPoint, NativeLongByReference NumPoints, ShortBuffer DataBuffer);

    /**
     * Original signature : <code>int cbFlashLED(int)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1633
     */
    int cbFlashLED(int BoardNum);

    /**
     * Original signature : <code>int cbGetErrMsg(int, char*)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1634
     */
    int cbGetErrMsg(int ErrCode, ByteBuffer ErrMsg);

    /**
     * Original signature : <code>int cbGetIOStatus(int, short*, long*, long*, int)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1635
     */
    int cbGetIOStatus(int BoardNum, ShortBuffer Status, NativeLongByReference CurCount, NativeLongByReference CurIndex, int FunctionType);

    /**
     * Original signature : <code>int cbRS485(int, int, int)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1637
     */
    int cbRS485(int BoardNum, int Transmit, int Receive);

    /**
     * Original signature : <code>int cbStopIOBackground(int, int)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1638
     */
    int cbStopIOBackground(int BoardNum, int FunctionType);

    /**
     * Original signature : <code>int cbTIn(int, int, int, float*, int)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1639
     */
    int cbTIn(int BoardNum, int Chan, int Scale, FloatBuffer TempValue, int Options);

    /**
     * Original signature : <code>int cbTInScan(int, int, int, int, float*, int)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1641
     */
    int cbTInScan(int BoardNum, int LowChan, int HighChan, int Scale, FloatBuffer DataBuffer, int Options);

    /**
     * Original signature : <code>int cbMemSetDTMode(int, int)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1643
     */
    int cbMemSetDTMode(int BoardNum, int Mode);

    /**
     * Original signature : <code>int cbMemReset(int)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1644
     */
    int cbMemReset(int BoardNum);

    /**
     * Original signature : <code>int cbMemRead(int, USHORT*, long, long)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1645
     */
    int cbMemRead(int BoardNum, ShortBuffer DataBuffer, NativeLong FirstPoint, NativeLong Count);

    /**
     * Original signature : <code>int cbMemWrite(int, USHORT*, long, long)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1647
     */
    int cbMemWrite(int BoardNum, ShortBuffer DataBuffer, NativeLong FirstPoint, NativeLong Count);

    /**
     * Original signature : <code>int cbMemReadPretrig(int, USHORT*, long, long)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1649
     */
    int cbMemReadPretrig(int BoardNum, ShortBuffer DataBuffer, NativeLong FirstPoint, NativeLong Count);

    /**
     * Original signature : <code>int cbWinBufToArray(HGLOBAL, USHORT*, long, long)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1651
     */
    int cbWinBufToArray(MeasurementComputingUniversalLibrary.HGLOBAL MemHandle, ShortBuffer DataArray, NativeLong FirstPoint, NativeLong Count);

    /**
     * Original signature : <code>int cbWinBufToArray32(HGLOBAL, ULONG*, long, long)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1653
     */
    int cbWinBufToArray32(MeasurementComputingUniversalLibrary.HGLOBAL MemHandle, NativeLongByReference DataArray, NativeLong FirstPoint, NativeLong Count);

    /**
     * Original signature : <code>int cbWinBufToArray64(HGLOBAL, ULONGLONG*, long, long)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1656
     */
    int cbWinBufToArray64(MeasurementComputingUniversalLibrary.HGLOBAL MemHandle, LongBuffer DataArray, NativeLong FirstPoint, NativeLong Count);

    /**
     * Original signature : <code>HGLOBAL cbScaledWinBufAlloc(long)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1659
     */
    MeasurementComputingUniversalLibrary.HGLOBAL cbScaledWinBufAlloc(NativeLong NumPoints);

    /**
     * Original signature : <code>int cbScaledWinBufToArray(HGLOBAL, double*, long, long)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1660
     */
    int cbScaledWinBufToArray(MeasurementComputingUniversalLibrary.HGLOBAL MemHandle, DoubleBuffer DataArray, NativeLong FirstPoint, NativeLong Count);

    /**
     * Original signature : <code>int cbWinArrayToBuf(USHORT*, HGLOBAL, long, long)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1663
     */
    int cbWinArrayToBuf(ShortBuffer DataArray, MeasurementComputingUniversalLibrary.HGLOBAL MemHandle, NativeLong FirstPoint, NativeLong Count);

    /**
     * Original signature : <code>int cbWinArrayToBuf32(ULONG*, HGLOBAL, long, long)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1665
     */
    int cbWinArrayToBuf32(NativeLongByReference DataArray, MeasurementComputingUniversalLibrary.HGLOBAL MemHandle, NativeLong FirstPoint, NativeLong Count);

    /**
     * Original signature : <code>int cbScaledWinArrayToBuf(double*, HGLOBAL, long, long)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1667
     */
    int cbScaledWinArrayToBuf(DoubleBuffer DataArray, MeasurementComputingUniversalLibrary.HGLOBAL MemHandle, NativeLong FirstPoint, NativeLong Count);

    /**
     * Original signature : <code>HGLOBAL cbWinBufAlloc(long)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1670
     */
    MeasurementComputingUniversalLibrary.HGLOBAL cbWinBufAlloc(NativeLong NumPoints);

    /**
     * Original signature : <code>HGLOBAL cbWinBufAlloc32(long)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1671
     */
    MeasurementComputingUniversalLibrary.HGLOBAL cbWinBufAlloc32(NativeLong NumPoints);

    /**
     * Original signature : <code>HGLOBAL cbWinBufAlloc64(long)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1672
     */
    MeasurementComputingUniversalLibrary.HGLOBAL cbWinBufAlloc64(NativeLong NumPoints);

    /**
     * Original signature : <code>int cbWinBufFree(HGLOBAL)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1673
     */
    int cbWinBufFree(MeasurementComputingUniversalLibrary.HGLOBAL MemHandle);

    /**
     * Original signature : <code>int cbInByte(int, int)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1674
     */
    int cbInByte(int BoardNum, int PortNum);

    /**
     * Original signature : <code>int cbOutByte(int, int, int)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1675
     */
    int cbOutByte(int BoardNum, int PortNum, int PortVal);

    /**
     * Original signature : <code>int cbInWord(int, int)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1676
     */
    int cbInWord(int BoardNum, int PortNum);

    /**
     * Original signature : <code>int cbOutWord(int, int, int)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1677
     */
    int cbOutWord(int BoardNum, int PortNum, int PortVal);

    /**
     * Original signature : <code>int cbGetConfig(int, int, int, int, int*)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1679
     */
    int cbGetConfig(int InfoType, int BoardNum, int DevNum, int ConfigItem, IntBuffer ConfigVal);

    /**
     * Original signature : <code>int cbGetConfigString(int, int, int, int, char*, int*)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1681
     */
    int cbGetConfigString(int InfoType, int BoardNum, int DevNum, int ConfigItem, ByteBuffer ConfigVal, IntBuffer maxConfigLen);

    /**
     * Original signature : <code>int cbSetConfig(int, int, int, int, int)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1684
     */
    int cbSetConfig(int InfoType, int BoardNum, int DevNum, int ConfigItem, int ConfigVal);

    /**
     * Original signature : <code>int cbSetConfigString(int, int, int, int, char*, int*)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1686
     */
    int cbSetConfigString(int InfoType, int BoardNum, int DevNum, int ConfigItem, ByteBuffer ConfigVal, IntBuffer configLen);

    /**
     * Original signature : <code>int cbToEngUnits(int, int, USHORT, float*)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1689
     */
    int cbToEngUnits(int BoardNum, int Range, short DataVal, FloatBuffer EngUnits);

    /**
     * Original signature : <code>int cbToEngUnits32(int, int, ULONG, double*)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1691
     */
    int cbToEngUnits32(int BoardNum, int Range, NativeLong DataVal, DoubleBuffer EngUnits);

    /**
     * Original signature : <code>int cbFromEngUnits(int, int, float, USHORT*)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1693
     */
    int cbFromEngUnits(int BoardNum, int Range, float EngUnits, ShortBuffer DataVal);

    /**
     * Original signature : <code>int cbGetBoardName(int, char*)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1695
     */
    int cbGetBoardName(int BoardNum, ByteBuffer BoardName);

    /**
     * Original signature : <code>int cbDeclareRevision(float*)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1696
     */
    int cbDeclareRevision(FloatBuffer RevNum);

    /**
     * Original signature : <code>int cbSetTrigger(int, int, USHORT, USHORT)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1697
     */
    int cbSetTrigger(int BoardNum, int TrigType, short LowThreshold, short HighThreshold);

    /**
     * Original signature : <code>int cbEnableEvent(int, unsigned, unsigned, EVENTCALLBACK, void*)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1700
     */
    int cbEnableEvent(int BoardNum, int EventType, int Count, MeasurementComputingUniversalLibrary.EVENTCALLBACK CallbackFunc, Pointer UserData);

    /**
     * Original signature : <code>int cbDisableEvent(int, unsigned)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1703
     */
    int cbDisableEvent(int BoardNum, int EventType);

    /**
     * Original signature : <code>int cbSelectSignal(int, int, int, int, int)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1704
     */
    int cbSelectSignal(int BoardNum, int Direction, int Signal, int Connection, int Polarity);

    /**
     * Original signature : <code>int cbGetSignal(int, int, int, int, int*, int*)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1705
     */
    int cbGetSignal(int BoardNum, int Direction, int Signal, int Index, IntBuffer Connection, IntBuffer Polarity);

    /**
     * Original signature : <code>int cbSetCalCoeff(int, int, int, int, int, int, int)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1707
     */
    int cbSetCalCoeff(int BoardNum, int FunctionType, int Channel, int Range, int Item, int Value, int Store);

    /**
     * Original signature : <code>int cbGetCalCoeff(int, int, int, int, int, int*)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1708
     */
    int cbGetCalCoeff(int BoardNum, int FunctionType, int Channel, int Range, int Item, IntBuffer Value);

    /**
     * store the preferences<br>
     * Original signature : <code>int cbLogSetPreferences(int, int, int)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1714
     */
    int cbLogSetPreferences(int timeFormat, int timeZone, int units);

    /**
     * get the preferences<br>
     * Original signature : <code>int cbLogGetPreferences(int*, int*, int*)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1717
     */
    int cbLogGetPreferences(IntBuffer timeFormat, IntBuffer timeZone, IntBuffer units);

    /**
     * Get log file name<br>
     * Original signature : <code>int cbLogGetFileName(int, char*, char*)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1720
     */
    int cbLogGetFileName(int fileNumber, ByteBuffer path, ByteBuffer filename);

    /**
     * Get info for log file<br>
     * Original signature : <code>int cbLogGetFileInfo(char*, int*, int*)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1723
     */
    int cbLogGetFileInfo(ByteBuffer filename, IntBuffer version, IntBuffer fileSize);

    /**
     * Get sample info for log file<br>
     * Original signature : <code>int cbLogGetSampleInfo(char*, int*, int*, int*, int*)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1726
     */
    int cbLogGetSampleInfo(ByteBuffer filename, IntBuffer sampleInterval, IntBuffer sampleCount, IntBuffer startDate, IntBuffer startTime);

    /**
     * Get the AI channel count for log file<br>
     * Original signature : <code>int cbLogGetAIChannelCount(char*, int*)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1730
     */
    int cbLogGetAIChannelCount(ByteBuffer filename, IntBuffer aiCount);

    /**
     * Get AI info for log file<br>
     * Original signature : <code>int cbLogGetAIInfo(char*, int*, int*)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1733
     */
    int cbLogGetAIInfo(ByteBuffer filename, IntBuffer channelNumbers, IntBuffer units);

    /**
     * Get CJC info for log file<br>
     * Original signature : <code>int cbLogGetCJCInfo(char*, int*)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1736
     */
    int cbLogGetCJCInfo(ByteBuffer filename, IntBuffer cjcCount);

    /**
     * Get DIO info for log file<br>
     * Original signature : <code>int cbLogGetDIOInfo(char*, int*)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1739
     */
    int cbLogGetDIOInfo(ByteBuffer filename, IntBuffer dioCount);

    /**
     * read the time tags to an array<br>
     * Original signature : <code>int cbLogReadTimeTags(char*, int, int, int*, int*)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1742
     */
    int cbLogReadTimeTags(ByteBuffer filename, int startSample, int count, IntBuffer dateTags, IntBuffer timeTags);

    /**
     * read the analog data to an array<br>
     * Original signature : <code>int cbLogReadAIChannels(char*, int, int, float*)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1745
     */
    int cbLogReadAIChannels(ByteBuffer filename, int startSample, int count, FloatBuffer analog);

    /**
     * read the CJC data to an array<br>
     * Original signature : <code>int cbLogReadCJCChannels(char*, int, int, float*)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1748
     */
    int cbLogReadCJCChannels(ByteBuffer filename, int startSample, int count, FloatBuffer cjc);

    /**
     * read the DIO data to an array<br>
     * Original signature : <code>int cbLogReadDIOChannels(char*, int, int, int*)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1751
     */
    int cbLogReadDIOChannels(ByteBuffer filename, int startSample, int count, IntBuffer dio);

    /**
     * convert the log file to a .TXT or .CSV file<br>
     * Original signature : <code>int cbLogConvertFile(char*, char*, int, int, int)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1754
     */
    int cbLogConvertFile(ByteBuffer srcFilename, ByteBuffer destFilename, int startSample, int count, int delimiter);

    /**
     * Original signature : <code>int cbDaqInScan(int, short*, short*, short*, int, long*, long*, long*, HGLOBAL, int)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1756
     */
    int cbDaqInScan(int BoardNum, ShortBuffer ChanArray, ShortBuffer ChanTypeArray, ShortBuffer GainArray, int ChanCount, NativeLongByReference Rate, NativeLongByReference PretrigCount, NativeLongByReference TotalCount, MeasurementComputingUniversalLibrary.HGLOBAL MemHandle, int Options);

    /**
     * Original signature : <code>int cbDaqSetTrigger(int, int, int, int, int, int, float, float, int)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1758
     */
    int cbDaqSetTrigger(int BoardNum, int TrigSource, int TrigSense, int TrigChan, int ChanType, int Gain, float Level, float Variance, int TrigEvent);

    /**
     * Original signature : <code>int cbDaqSetSetpoints(int, float*, float*, float*, int*, int*, float*, float*, float*, float*, int)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1760
     */
    int cbDaqSetSetpoints(int BoardNum, FloatBuffer LimitAArray, FloatBuffer LimitBArray, FloatBuffer Reserved, IntBuffer SetpointFlagsArray, IntBuffer SetpointOutputArray, FloatBuffer Output1Array, FloatBuffer Output2Array, FloatBuffer OutputMask1Array, FloatBuffer OutputMask2Array, int SetpointCount);

    /**
     * Original signature : <code>int cbDaqOutScan(int, short*, short*, short*, int, long*, long, HGLOBAL, int)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1764
     */
    int cbDaqOutScan(int BoardNum, ShortBuffer ChanArray, ShortBuffer ChanTypeArray, ShortBuffer GainArray, int ChanCount, NativeLongByReference Rate, NativeLong Count, MeasurementComputingUniversalLibrary.HGLOBAL MemHandle, int Options);

    /**
     * Original signature : <code>int cbGetTCValues(int, short*, short*, int, HGLOBAL, int, long, int, float*)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1766
     */
    int cbGetTCValues(int BoardNum, ShortBuffer ChanArray, ShortBuffer ChanTypeArray, int ChanCount, MeasurementComputingUniversalLibrary.HGLOBAL MemHandle, int FirstPoint, NativeLong Count, int Scale, FloatBuffer TempValArray);

    /**
     * Original signature : <code>int cbVIn(int, int, int, float*, int)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1769
     */
    int cbVIn(int BoardNum, int Chan, int Gain, FloatBuffer DataValue, int Options);

    /**
     * Original signature : <code>int cbVIn32(int, int, int, double*, int)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1770
     */
    int cbVIn32(int BoardNum, int Chan, int Gain, DoubleBuffer DataValue, int Options);

    /**
     * Original signature : <code>int cbVOut(int, int, int, float, int)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1771
     */
    int cbVOut(int BoardNum, int Chan, int Gain, float DataValue, int Options);

    /**
     * Original signature : <code>int cbDeviceLogin(int, char*, char*)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1773
     */
    int cbDeviceLogin(int BoardNum, ByteBuffer AccountName, ByteBuffer Password);

    /**
     * Original signature : <code>int cbDeviceLogout(int)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1774
     */
    int cbDeviceLogout(int BoardNum);

    /**
     * Original signature : <code>int cbTEDSRead(int, int, BYTE*, long*, int)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1776
     */
    int cbTEDSRead(int BoardNum, int Chan, ByteBuffer DataBuffer, NativeLongByReference Count, int Options);

    /**
     * Original signature : <code>int cbAInputMode(int, int)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1778
     */
    int cbAInputMode(int BoardNum, int InputMode);

    /**
     * Original signature : <code>int cbAChanInputMode(int, int, int)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1779
     */
    int cbAChanInputMode(int BoardNum, int Chan, int InputMode);

    /**
     * Original signature : <code>int cbIgnoreInstaCal()</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1781
     */
    int cbIgnoreInstaCal();

    /**
     * The original C/C++ function prototype is:<br>
     * <code>int cbCreateDaqDevice(int BoardNum, DaqDeviceDescriptor deviceDescriptor)</code><br>
     * https://www.mccdaq.com/pdfs/manuals/Mcculw_WebHelp/hh_goto.htm?ULStart.htm#Function_Reference/Device-Discovery/cbCreateDaqDevice.htm
     * <p>
     * JNAerator generated:<br>
     * <code>int cbCreateDaqDevice(int BdNum, DaqDeviceDescriptor.ByValue DeviceDescriptor);</code>
     * <p>
     * I am manually removing the ByValue part because that works. Allocating an array of structs in <br>
     * Java is already pretty weird and I don't want to try changing it to ByValue. According to this <br>
     * StackOverflow answer https://stackoverflow.com/a/17698870/7376577 you shouldn't use ByValue.
     * <p>
     * Original signature : <code>int cbCreateDaqDevice(int, DaqDeviceDescriptor)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1782
     */
    int cbCreateDaqDevice(int BdNum, DaqDeviceDescriptor DeviceDescriptor);

    /**
     * Original signature : <code>int cbGetDaqDeviceInventory(DaqDeviceInterface, DaqDeviceDescriptor*, INT*)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1783
     */
    int cbGetDaqDeviceInventory(int InterfaceType, DaqDeviceDescriptor Inventory, IntBuffer NumberOfDevices);

    /**
     * Original signature : <code>int cbReleaseDaqDevice(int)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1784
     */
    int cbReleaseDaqDevice(int BdNum);

    /**
     * The original C/C++ function prototype is:<br>
     * <code>int cbGetBoardNumber(DaqDeviceDescriptor DeviceDescriptor)</code><br>
     * https://www.mccdaq.com/pdfs/manuals/Mcculw_WebHelp/hh_goto.htm?ULStart.htm#Function_Reference/Device-Discovery/cbGetBoardNumber.htm
     * <p>
     * JNAerator generated:<br>
     * <code>int cbGetBoardNumber(DaqDeviceDescriptor.ByValue DeviceDescriptor);</code>
     * <p>
     * I am manually removing the ByValue part becasue I don't know how to get a DaqDeviceDescriptor.ByValue from a DaqDeviceDescriptor.
     * <p>
     * Original signature : <code>int cbGetBoardNumber(DaqDeviceDescriptor)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1785
     */
    int cbGetBoardNumber(DaqDeviceDescriptor DeviceDescriptor);

    /**
     * Original signature : <code>int cbGetNetDeviceDescriptor(CHAR*, INT, DaqDeviceDescriptor*, INT)</code><br>
     * native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1786
     */
    int cbGetNetDeviceDescriptor(ByteBuffer Host, int Port, DaqDeviceDescriptor DeviceDescriptor, int Timeout);

    /** native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h<br> */
    public static interface DaqDeviceInterface {

        /** native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1493 */
        public static final int USB_IFC = 1 << 0;

        /** native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1494 */
        public static final int BLUETOOTH_IFC = 1 << 1;

        /** native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1495 */
        public static final int ETHERNET_IFC = 1 << 2;

        /** native declaration : C:\Users\Public\Documents\Measurement Computing\DAQ\C\cbw.h:1496 */
        public static final int ANY_IFC = (int) MeasurementComputingUniversalLibrary.DaqDeviceInterface.USB_IFC | (int) MeasurementComputingUniversalLibrary.DaqDeviceInterface.BLUETOOTH_IFC | (int) MeasurementComputingUniversalLibrary.DaqDeviceInterface.ETHERNET_IFC;
    }

    public interface EVENTCALLBACK extends StdCallLibrary.StdCallCallback {

        void apply(int int1, int u1, int u2, Pointer voidPtr1);
    }

    public static class HGLOBAL extends PointerType {

        public HGLOBAL(Pointer address) {
            super(address);
        }

        public HGLOBAL() {
            super();
        }
    }

    ;
}
